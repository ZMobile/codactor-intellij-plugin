package com.translator.view.codactor.console;

import com.google.gson.Gson;
import com.intellij.openapi.editor.Document;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.EditorFactory;
import com.intellij.openapi.editor.SelectionModel;
import com.intellij.openapi.fileEditor.*;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.ComboBox;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.ui.components.*;
import com.intellij.util.messages.MessageBus;
import com.intellij.util.messages.MessageBusConnection;
import com.translator.model.codactor.ide.file.FileItem;
import com.translator.model.codactor.ai.modification.ModificationType;
import com.translator.service.codactor.ai.chat.context.PromptContextService;
import com.translator.service.codactor.ai.chat.functions.InquiryFunctionCallProcessorService;
import com.translator.service.codactor.ai.modification.AiCodeModificationService;
import com.translator.service.codactor.ide.editor.CodeHighlighterService;
import com.translator.service.codactor.ide.editor.CodeSnippetExtractorService;
import com.translator.service.codactor.ide.editor.diff.DiffEditorGeneratorService;
import com.translator.service.codactor.ide.editor.psi.FindImplementationsService;
import com.translator.service.codactor.ide.editor.psi.FindUsagesService;
import com.translator.service.codactor.factory.PromptContextServiceFactory;
import com.translator.service.codactor.ide.file.SelectedFileFetcherService;
import com.translator.service.codactor.ai.chat.inquiry.InquiryService;
import com.translator.service.codactor.ai.openai.OpenAiModelService;
import com.translator.service.codactor.test.*;
import com.translator.service.codactor.ui.ModificationTypeComboBoxService;
import com.translator.service.codactor.ui.tool.CodactorToolWindowService;
import com.translator.view.codactor.dialog.MultiFileCreateDialog;
import com.translator.view.codactor.dialog.PromptContextBuilderDialog;
import com.translator.view.codactor.factory.InquiryViewerFactory;
import com.translator.view.codactor.factory.dialog.MultiFileCreateDialogFactory;
import com.translator.view.codactor.factory.dialog.PromptContextBuilderDialogFactory;
import com.translator.view.codactor.listener.file.CodactorFileEditorManagerListener;
import com.translator.view.codactor.viewer.inquiry.InquiryViewer;
import com.translator.view.uml.application.CodactorUmlBuilderApplication;

import javax.inject.Inject;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Objects;

public class CodactorConsole extends JBPanel<CodactorConsole> {
    private Project project;
    private JBTextArea textArea;
    private JButton button1;
    private JButton button2;
    private ComboBox<String> modelComboBox;
    private ComboBox<FileItem> fileComboBox;
    private ComboBox<String> modificationTypeComboBox;
    private JLabel jLabel1;
    private JBTextField languageInputTextField;
    private JBLabel jLabel2;
    private JBTextField fileTypeTextField;
    private JButton advancedButton;
    private JLabel hiddenLabel;
    private PromptContextService promptContextService;
    private CodactorToolWindowService codactorToolWindowService;
    private SelectedFileFetcherService selectedFileFetcherService;
    private CodeSnippetExtractorService codeSnippetExtractorService;
    private AiCodeModificationService aiCodeModificationService;
    private InquiryService inquiryService;
    private OpenAiModelService openAiModelService;
    private ModificationTypeComboBoxService modificationTypeComboBoxService;
    // For testing purposes
    private Gson gson;
    private FindImplementationsService findImplementationsService;
    private FindUsagesService findUsagesService;
    private CodeHighlighterService codeHighlighterService;
    // For testing purposes
    private CodactorUmlBuilderApplication codactorUmlBuilderApplication;
    private MultiFileCreateDialogFactory multiFileCreateDialogFactory;
    private PromptContextBuilderDialogFactory promptContextBuilderDialogFactory;
    private InquiryViewerFactory inquiryViewerFactory;
    private InquiryFunctionCallProcessorService inquiryFunctionCallProcessorService;
    private DiffEditorGeneratorService diffEditorGeneratorService;

    @Inject
    public CodactorConsole(Project project,
                           PromptContextServiceFactory promptContextServiceFactory,
                           CodactorToolWindowService codactorToolWindowService,
                           SelectedFileFetcherService selectedFileFetcherService,
                           CodeSnippetExtractorService codeSnippetExtractorService,
                           InquiryService inquiryService,
                           OpenAiModelService openAiModelService,
                           ModificationTypeComboBoxService modificationTypeComboBoxService,
                           AiCodeModificationService aiCodeModificationService,
                           Gson gson,
                           FindImplementationsService findImplementationsService,
                           FindUsagesService findUsagesService,
                           CodeHighlighterService codeHighlighterService,
                           //CodactorUmlBuilderApplication codactorUmlBuilderApplication,
                           MultiFileCreateDialogFactory multiFileCreateDialogFactory,
                           PromptContextBuilderDialogFactory promptContextBuilderDialogFactory,
                           InquiryViewerFactory inquiryViewerFactory,
                           InquiryFunctionCallProcessorService inquiryFunctionCallProcessorService,
                           DiffEditorGeneratorService diffEditorGeneratorService) {
        super(new BorderLayout());
        this.project = project;
        this.promptContextService = promptContextServiceFactory.create();
        this.codactorToolWindowService = codactorToolWindowService;
        this.selectedFileFetcherService = selectedFileFetcherService;
        this.codeSnippetExtractorService = codeSnippetExtractorService;
        this.inquiryService = inquiryService;
        this.openAiModelService = openAiModelService;
        this.modificationTypeComboBoxService = modificationTypeComboBoxService;
        this.aiCodeModificationService = aiCodeModificationService;
        this.gson = gson;
        this.findImplementationsService = findImplementationsService;
        this.findUsagesService = findUsagesService;
        this.codeHighlighterService = codeHighlighterService;
        //this.codactorUmlBuilderApplication = codactorUmlBuilderApplication;
        this.multiFileCreateDialogFactory = multiFileCreateDialogFactory;
        this.promptContextBuilderDialogFactory = promptContextBuilderDialogFactory;
        this.inquiryViewerFactory = inquiryViewerFactory;
        this.inquiryFunctionCallProcessorService = inquiryFunctionCallProcessorService;
        this.diffEditorGeneratorService = diffEditorGeneratorService;

        textArea = new JBTextArea();
        textArea.setBackground(Color.BLACK);
        textArea.setForeground(Color.WHITE);
        textArea.setCaretColor(Color.WHITE);
        JBScrollPane scrollPane = new JBScrollPane(textArea);

        button1 = new JButton("Button 1");
        button2 = new JButton();
        button2.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/microphone_icon.png"))));

        modelComboBox = new ComboBox<>(new String[]{"gpt-3.5-turbo", "gpt-3.5-turbo-16k", "gpt-4", "gpt-4-32k"});
        modelComboBox.addActionListener(e -> {
            JComboBox<String> cb = (JComboBox<String>) e.getSource();
            String model = (String) cb.getSelectedItem();
            if (model != null) {
                openAiModelService.setSelectedOpenAiModel(model);
            }
        });
        VirtualFile[] selectedFiles = selectedFileFetcherService.getCurrentlySelectedFiles();
        VirtualFile[] openFiles = selectedFileFetcherService.getOpenFiles();
        fileComboBox = new ComboBox<>();
        fileComboBox.setVisible(
                (selectedFiles != null && selectedFiles.length > 1)
                || (openFiles != null && openFiles.length > 1));
        VirtualFile currentlyOpenFile = getSelectedFile();
        if (currentlyOpenFile != null) {
            fileComboBox.addItem(new FileItem(currentlyOpenFile.getPath()));
            if (selectedFiles.length > 1) {
                for (VirtualFile selectedFile : selectedFiles) {
                    if (!selectedFile.equals(currentlyOpenFile)) {
                        fileComboBox.addItem(new FileItem(selectedFile.getPath()));
                    }
                }
            } else if (openFiles.length > 1) {
                for (VirtualFile openFile : openFiles) {
                    if (!openFile.equals(currentlyOpenFile)) {
                        fileComboBox.addItem(new FileItem(openFile.getPath()));
                    }
                }
            }
        }
        modificationTypeComboBox = modificationTypeComboBoxService.getModificationTypeComboBox();
        jLabel1 = new JLabel();
        advancedButton = new JButton("(Advanced) Add Context");
        advancedButton.addActionListener(e -> {
                promptContextService.setStatusLabel(hiddenLabel);
                PromptContextBuilderDialog promptContextBuilderDialog = promptContextBuilderDialogFactory.create(promptContextService);
                promptContextBuilderDialog.show();
        });
        hiddenLabel = new JLabel();
        hiddenLabel.setVisible(false);

        button1.setText("Modify");
        jLabel1.setText(" Implement the following modification(s) to this code file:");
        /*modelComboBox.addItemListener(e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                modificationTypeComboBox.removeAllItems();
                for (String option : options) {
                    modificationTypeComboBox.addItem(option);
                }
            }
        });*/

        FileEditorManagerListener fileEditorManagerListener = new CodactorFileEditorManagerListener(project, selectedFileFetcherService, fileComboBox);
        MessageBus messageBus = project.getMessageBus();
        MessageBusConnection connection = messageBus.connect();

        // Register the listener
        connection.subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);

        modificationTypeComboBox.addItemListener(e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                String selected = (String) modificationTypeComboBox.getSelectedItem();
                updateLabelAndButton(selected);
            }
        });

        JPanel buttonsPanel = new JPanel();
        GroupLayout buttonsPanelLayout = new GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
                buttonsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(buttonsPanelLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(buttonsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(button2, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(button1, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE))
                        ));
        buttonsPanelLayout.setVerticalGroup(
                buttonsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(buttonsPanelLayout.createSequentialGroup()
                                .addComponent(button2, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(button1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JPanel topToolbar = new JPanel();
        topToolbar.setLayout(new BorderLayout());
        JPanel leftToolbar = new JPanel(new FlowLayout(FlowLayout.LEFT));
        leftToolbar.add(modelComboBox);
        leftToolbar.add(fileComboBox);
        leftToolbar.add(modificationTypeComboBox);
        leftToolbar.add(jLabel1);
        languageInputTextField = new JBTextField();
        languageInputTextField.setVisible(false);
        leftToolbar.add(languageInputTextField);
        jLabel2 = new JBLabel(" to file type: ");
        jLabel2.setVisible(false);
        leftToolbar.add(jLabel2);
        fileTypeTextField = new JBTextField();
        fileTypeTextField.setVisible(false);
        leftToolbar.add(fileTypeTextField);
        JPanel rightToolbar = new JPanel(new FlowLayout(FlowLayout.RIGHT, 0, 5)); // Set horizontal gap to 0
        rightToolbar.add(hiddenLabel);
        rightToolbar.add(advancedButton);

        JButton testButton = new JButton("Test");
        testButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String subjectLine = "Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints \"Hello World Two!\"";
                String beforeCode = "package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}";
                String modification = "Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints \"Hello World Two!\"";
                String suggestedCodeBeforeRestoration = "package com.translator.service.modification;\n\n//... [Code omitted for brevity]\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    //... [Code omitted for brevity]\n\n\n    public CodeModifierServiceImpl(\n    //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    \n    public void printHelloWorldTwo() {\n        System.out.println(\"Hello World Two!\");\n    }\n    \n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(\n    //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    \n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(\n    //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    \n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(\n    //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    \n    \n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(\n    //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    \n    \n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(\n    //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    \n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(\n        //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    }\n";
                String suggestedCode = "\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n    \n\n\n\n\n    \n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(\n\n    ) {\n\n    }\n\n    \n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(\n\n    ) {\n\n    }\n\n    \n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(\n\n    ) {\n\n    }\n\n    \n    \n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n    public GptCodeCompletionResponseResource fixCodeBugSingular(\n\n    ) {\n\n    }\n\n\n    \n    \n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(\n\n    ) {\n\n    }\n\n\n    \n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(\n\n    ) {\n\n    }\n    }\n\n    public void printHelloWorldTwo() {\n        System.out.println(\"Hello World Two!\");\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(\n\n    ) {\n\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(\n\n    ) {\n\n    }\n\n    public CodeModifierServiceImpl(\n\n    ) {\n\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(\n\n    ) {\n\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(\n\n    ) {\n\n    }\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(\n\n    ) {\n\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(\n\n    ) {\n\n    }\n}";

                DiffStringService diffStringService = new DiffStringServiceImpl();
                StringCodeOmittedRestorerService stringCodeOmittedRestorerService = new StringCodeOmittedRestorerServiceImpl();
                FusedMethodHandlerService fusedMethodHandlerService = new FusedMethodHandlerServiceImpl();
                StringCodeOmittedRestorationManagementService stringCodeOmittedRestorationManagementService = new StringCodeOmittedRestorationManagementServiceImpl(diffStringService, stringCodeOmittedRestorerService, fusedMethodHandlerService);

                        //Test:
                //{"modificationHistory":[{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":9},"time":{"hour":5,"minute":39,"second":16,"nano":861818293}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":9},"time":{"hour":5,"minute":39,"second":16,"nano":861836789}},"myId":"7c7793cd-7ba9-4b01-9a2e-33ace487ccf5","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"8e44b3a9-bca6-4545-b665-ebbb696e548e","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints \"Hello World Two!\"","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints \"Hello World Two!\"","suggestedCodeBeforeRestoration":"package com.translator.service.modification;\n\n//... [Code omitted for brevity]\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    //... [Code omitted for brevity]\n\n\n    public CodeModifierServiceImpl(\n    //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    \n    public void printHelloWorldTwo() {\n        System.out.println(\"Hello World Two!\");\n    }\n    \n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(\n    //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    \n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(\n    //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    \n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(\n    //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    \n    \n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(\n    //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    \n    \n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(\n    //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    \n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(\n        //... [Code omitted for brevity]\n    ) {\n        //... [Code omitted for brevity]\n    }\n    }\n","suggestedCode":"\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n    \n\n\n\n\n    \n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(\n\n    ) {\n\n    }\n\n    \n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(\n\n    ) {\n\n    }\n\n    \n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(\n\n    ) {\n\n    }\n\n    \n    \n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n    public GptCodeCompletionResponseResource fixCodeBugSingular(\n\n    ) {\n\n    }\n\n\n    \n    \n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(\n\n    ) {\n\n    }\n\n\n    \n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(\n\n    ) {\n\n    }\n    }\n\n    public void printHelloWorldTwo() {\n        System.out.println(\"Hello World Two!\");\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(\n\n    ) {\n\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(\n\n    ) {\n\n    }\n\n    public CodeModifierServiceImpl(\n\n    ) {\n\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(\n\n    ) {\n\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(\n\n    ) {\n\n    }\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(\n\n    ) {\n\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(\n\n    ) {\n\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":9},"time":{"hour":5,"minute":36,"second":19,"nano":432149232}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":9},"time":{"hour":5,"minute":36,"second":19,"nano":432167175}},"myId":"c7e8475b-e9d9-4187-836d-8d04c7583085","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"dcf5a701-19eb-4cf8-808b-d3589d5cec2c","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints \"Hello World Two!\"","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints \"Hello World Two!\"","suggestedCodeBeforeRestoration":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    // [Code omitted for brevity]\n\n    public void printMessageOne() {\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    public void printMessageTwo() {\n            System.out.println(\"Hello World Two!\");\n        }\n    }\n","suggestedCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n    }\n\n    public void printMessageOne() {\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    public void printMessageTwo() {\n            System.out.println(\"Hello World Two!\");\n        }","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":9},"time":{"hour":5,"minute":35,"second":9,"nano":929889848}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":9},"time":{"hour":5,"minute":35,"second":9,"nano":929907535}},"myId":"9193251e-f9d2-4a7a-864e-239b6f5c1c14","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"bd67fe31-cf0e-4980-a4f8-2fdb9b6169ee","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints \"Hello World Two!\"","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints \"Hello World Two!\"","suggestedCodeBeforeRestoration":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\n// [Code omitted for brevity]\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    // [Code omitted for brevity]\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   // [Code omitted for brevity]\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        // [Code omitted for brevity]\n    }\n\n    // [Code omitted for brevity]\n\n    public void printWohooWorldOne() {\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    public void printHelloWorldTwo() {\n            System.out.println(\"Hello World Two!\");\n        }\n    }\n","suggestedCode":"\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n\n    }\n\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n\n    }\n\n    public void printHelloWorldTwo() {\n            System.out.println(\"Hello World Two!\");\n        }\n\n    public void printWohooWorldOne() {\n        System.out.println(\"Wohoo World One!\");\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":9},"time":{"hour":5,"minute":30,"second":31,"nano":31590104}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":9},"time":{"hour":5,"minute":30,"second":31,"nano":31609838}},"myId":"dc2db778-3e2f-4eac-92be-b02eb7a4ca8a","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"baa62374-9c91-4a67-89e1-fb392883514e","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add two methods to a class: one prints a string, another prints prime numbers below 100","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","suggestedCodeBeforeRestoration":"@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n\n    // Existing definition and methods here\n\n    // [Code omitted for brevity]\n    \n    // Method to print \"Wohoo World One!\"\n    public void printHello() {\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    // Method to print all prime numbers below 100\n    public void printPrimeNumbers() {\n        for(int i\u003d2; i\u003c100; i++) {\n            boolean isPrime \u003d true;\n            for(int j\u003d2; j\u003ci; j++) {\n                if(i%j \u003d\u003d 0) {\n                    isPrime \u003d false;\n                    break; \n                }\n            }\n            if(isPrime)\n                System.out.println(i);\n        }\n    }\npublic static void main(String[] args) {\n        CodeModifierServiceImpl service \u003d new CodeModifierServiceImpl( /* Your constructor parameters */ );\n\n        // Call the printHello method\n        service.printHello();\n\n        // Call the printPrimeNumbers method\n        service.printPrimeNumbers();\n    }\n}\n","suggestedCode":"\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n\n    // Existing definition and methods here\n\n    \n    // Method to print \"Wohoo World One!\"\n\n\n    // Method to print all prime numbers below 100\n    public void printPrimeNumbers() {\n        for(int i\u003d2; i\u003c100; i++) {\n            boolean isPrime \u003d true;\n            for(int j\u003d2; j\u003ci; j++) {\n                if(i%j \u003d\u003d 0) {\n                    isPrime \u003d false;\n                    break; \n                }\n            }\n            if(isPrime)\n                System.out.println(i);\n        }\n    }\npublic static void main(String[] args) {\n        CodeModifierServiceImpl service \u003d new CodeModifierServiceImpl( /* Your constructor parameters */ );\n\n        // Call the printHello method\n        service.printHello();\n\n        // Call the printPrimeNumbers method\n        service.printPrimeNumbers();\n    }\n\n    public void printPrimeNumbers() {\n        for(int i\u003d2; i\u003c100; i++) {\n            boolean isPrime \u003d true;\n            for(int j\u003d2; j\u003ci; j++) {\n                if(i%j \u003d\u003d 0) {\n                    isPrime \u003d false;\n                    break; \n                }\n            }\n            if(isPrime)\n                System.out.println(i);\n        }\n    }\n\npublic static void main(String[] args) {\n        CodeModifierServiceImpl service \u003d new CodeModifierServiceImpl( /* Your constructor parameters */ );\n\n        // Call the printHello method\n        service.printHello();\n\n        // Call the printPrimeNumbers method\n        service.printPrimeNumbers();\n    }\n\n    public void printHello() {\n        System.out.println(\"Wohoo World One!\");\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":9},"time":{"hour":5,"minute":29,"second":43,"nano":400309564}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":9},"time":{"hour":5,"minute":29,"second":43,"nano":400335671}},"myId":"28f1afc8-3bab-419f-8a8e-191a61948fd7","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"ef0d7581-5255-4b61-a713-608c846aa0d5","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","suggestedCodeBeforeRestoration":"@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n\n    // [Code omitted for brevity]\n\n    // Additional method to print a statement\n        public void printWorldOne() {\n            System.out.println(\"Wohoo World One!\");\n        }\n    \n        // Additional method to print prime numbers below 100\n        public void printPrimeNumbersBelow100() {\n            for (int num \u003d 2; num \u003c 100; num++) {\n                boolean isPrime \u003d true;\n                for (int i \u003d 2; i \u003c\u003d num / 2; i++) {\n                    if (num % i \u003d\u003d 0) {\n                        isPrime \u003d false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    System.out.println(num);\n                }\n            }\n        }\n    \n        // [Code omitted for brevity]\n    }\n","suggestedCode":"\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n    // Additional method to print a statement\n\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n    \n        // Additional method to print prime numbers below 100\n        public void printPrimeNumbersBelow100() {\n            for (int num \u003d 2; num \u003c 100; num++) {\n                boolean isPrime \u003d true;\n                for (int i \u003d 2; i \u003c\u003d num / 2; i++) {\n                    if (num % i \u003d\u003d 0) {\n                        isPrime \u003d false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    System.out.println(num);\n                }\n            }\n        }\n    \n\n    }\n\n        public void printPrimeNumbersBelow100() {\n            for (int num \u003d 2; num \u003c 100; num++) {\n                boolean isPrime \u003d true;\n                for (int i \u003d 2; i \u003c\u003d num / 2; i++) {\n                    if (num % i \u003d\u003d 0) {\n                        isPrime \u003d false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    System.out.println(num);\n                }\n            }\n        }\n\n        public void printWorldOne() {\n            System.out.println(\"Wohoo World One!\");\n        }","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":9},"time":{"hour":1,"minute":9,"second":41,"nano":835309461}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":9},"time":{"hour":1,"minute":9,"second":41,"nano":835341077}},"myId":"a1b0d259-696a-40ee-8529-772d09b1b2f7","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"b154ca3e-719d-4b63-a66d-82a90a8543e8","modificationType":"MODIFY_SELECTION","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/JavaClassParserServiceImpl.java","subjectLine":"This correctly collects the bodies of the method/constructor but they dont include the signature","beforeCode":"@Override\n    public Map\u003cBodyDeclaration\u003c?\u003e, String\u003e findImproperlyMergedMethodsAndConstructors(String code, List\u003cBodyDeclaration\u003c?\u003e\u003e allUniqueMethods) {\n        List\u003cString\u003e signatures \u003d collectMethodOrConstructorSignatures(code);\n        Map\u003cBodyDeclaration\u003c?\u003e, String\u003e bodyDeclarationToStringMap \u003d new HashMap\u003c\u003e();\n        Map\u003cBodyDeclaration\u003c?\u003e, String\u003e improperlyMergedMethodsMap \u003d new HashMap\u003c\u003e();\n\n        //First things first, remove duplicate signatures:\n        List\u003cString\u003e uniqueSignatures \u003d new ArrayList\u003c\u003e();\n        for (String signature : signatures) {\n            String trimmedSignature \u003d signature.trim();\n            if (!uniqueSignatures.contains(trimmedSignature)) {\n                uniqueSignatures.add(trimmedSignature);\n            } else {\n                System.out.println(\"Duplicate signature: \" + signature);\n            }\n        }\n        System.out.println(\"Signatures size: \" + signatures.size());\n        System.out.println(\"Unique signatures size: \" + uniqueSignatures.size());\n        int startIndex \u003d 0;\n        for (String signature : uniqueSignatures) {\n            int signatureIndex \u003d code.indexOf(signature, startIndex);\n            String body \u003d code.substring(startIndex, signatureIndex);\n            startIndex \u003d signatureIndex + signature.length();\n            System.out.println(\"Body: \" + body);\n            for (BodyDeclaration\u003c?\u003e bodyDeclaration : allUniqueMethods) {\n                if (bodyDeclaration.toString().trim().contains(signature.trim())) {\n                    System.out.println(\"Body Map Found: \" + body);\n                    bodyDeclarationToStringMap.put(bodyDeclaration, body);\n                }\n            }\n        }\n\n        for (BodyDeclaration\u003c?\u003e key : bodyDeclarationToStringMap.keySet()) {\n            String body \u003d bodyDeclarationToStringMap.get(key);\n            boolean syntaxCorrect \u003d isMethodOrConstructor(body);\n            if (!syntaxCorrect) {\n                improperlyMergedMethodsMap.put(key, body);\n            }\n        }\n\n        return improperlyMergedMethodsMap;\n    }","modification":"This correctly collects the bodies of the method/constructor but they dont include the signature","suggestedCodeBeforeRestoration":"@Override\n    public Map\u003cBodyDeclaration\u003c?\u003e, String\u003e findImproperlyMergedMethodsAndConstructors(String code, List\u003cBodyDeclaration\u003c?\u003e\u003e allUniqueMethods) {\n        List\u003cString\u003e signatures \u003d collectMethodOrConstructorSignatures(code);\n        Map\u003cBodyDeclaration\u003c?\u003e, String\u003e bodyDeclarationToStringMap \u003d new HashMap\u003c\u003e();\n        Map\u003cBodyDeclaration\u003c?\u003e, String\u003e improperlyMergedMethodsMap \u003d new HashMap\u003c\u003e();\n\n        //First things first, remove duplicate signatures:\n        List\u003cString\u003e uniqueSignatures \u003d new ArrayList\u003c\u003e();\n        for (String signature : signatures) {\n            String trimmedSignature \u003d signature.trim();\n            if (!uniqueSignatures.contains(trimmedSignature)) {\n                uniqueSignatures.add(trimmedSignature);\n            } else {\n                System.out.println(\"Duplicate signature: \" + signature);\n            }\n        }\n        System.out.println(\"Signatures size: \" + signatures.size());\n        System.out.println(\"Unique signatures size: \" + uniqueSignatures.size());\n        int startIndex \u003d 0;\n        for (String signature : uniqueSignatures) {\n            int signatureIndex \u003d code.indexOf(signature, startIndex);\n            String bodyWithoutSignature \u003d code.substring(signatureIndex + signature.length());\n            startIndex \u003d signatureIndex + signature.length();\n            System.out.println(\"Body without Signature: \" + bodyWithoutSignature);\n            for (BodyDeclaration\u003c?\u003e bodyDeclaration : allUniqueMethods) {\n                if (bodyDeclaration.toString().trim().contains(signature.trim())) {\n                    System.out.println(\"Body Map Found: \" + bodyWithoutSignature);\n                    bodyDeclarationToStringMap.put(bodyDeclaration, bodyWithoutSignature);\n                }\n            }\n        }\n\n        for (BodyDeclaration\u003c?\u003e key : bodyDeclarationToStringMap.keySet()) {\n            String body \u003d bodyDeclarationToStringMap.get(key);\n            boolean syntaxCorrect \u003d isMethodOrConstructor(body);\n            if (!syntaxCorrect) {\n                improperlyMergedMethodsMap.put(key, body);\n            }\n        }\n\n        return improperlyMergedMethodsMap;\n    }\n","suggestedCode":"@Override\n    public Map\u003cBodyDeclaration\u003c?\u003e, String\u003e findImproperlyMergedMethodsAndConstructors(String code, List\u003cBodyDeclaration\u003c?\u003e\u003e allUniqueMethods) {\n        List\u003cString\u003e signatures \u003d collectMethodOrConstructorSignatures(code);\n        Map\u003cBodyDeclaration\u003c?\u003e, String\u003e bodyDeclarationToStringMap \u003d new HashMap\u003c\u003e();\n        Map\u003cBodyDeclaration\u003c?\u003e, String\u003e improperlyMergedMethodsMap \u003d new HashMap\u003c\u003e();\n\n        //First things first, remove duplicate signatures:\n        List\u003cString\u003e uniqueSignatures \u003d new ArrayList\u003c\u003e();\n        for (String signature : signatures) {\n            String trimmedSignature \u003d signature.trim();\n            if (!uniqueSignatures.contains(trimmedSignature)) {\n                uniqueSignatures.add(trimmedSignature);\n            } else {\n                System.out.println(\"Duplicate signature: \" + signature);\n            }\n        }\n        System.out.println(\"Signatures size: \" + signatures.size());\n        System.out.println(\"Unique signatures size: \" + uniqueSignatures.size());\n        int startIndex \u003d 0;\n        for (String signature : uniqueSignatures) {\n            int signatureIndex \u003d code.indexOf(signature, startIndex);\n            String bodyWithoutSignature \u003d code.substring(signatureIndex + signature.length());\n            startIndex \u003d signatureIndex + signature.length();\n            System.out.println(\"Body without Signature: \" + bodyWithoutSignature);\n            for (BodyDeclaration\u003c?\u003e bodyDeclaration : allUniqueMethods) {\n                if (bodyDeclaration.toString().trim().contains(signature.trim())) {\n                    System.out.println(\"Body Map Found: \" + bodyWithoutSignature);\n                    bodyDeclarationToStringMap.put(bodyDeclaration, bodyWithoutSignature);\n                }\n            }\n        }\n\n        for (BodyDeclaration\u003c?\u003e key : bodyDeclarationToStringMap.keySet()) {\n            String body \u003d bodyDeclarationToStringMap.get(key);\n            boolean syntaxCorrect \u003d isMethodOrConstructor(body);\n            if (!syntaxCorrect) {\n                improperlyMergedMethodsMap.put(key, body);\n            }\n        }\n\n        return improperlyMergedMethodsMap;\n    }","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":8},"time":{"hour":20,"minute":14,"second":22,"nano":117889651}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":8},"time":{"hour":20,"minute":14,"second":22,"nano":117905100}},"myId":"ea794155-88e7-4ba2-a367-9db62cd3dd99","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"907f8cbd-13e5-4ec0-a5ca-cf7715b0a45a","modificationType":"MODIFY_SELECTION","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/JavaClassParserServiceImpl.java","subjectLine":"I need a better loop for this","beforeCode":" public List\u003cString\u003e collectMethodOrConstructorSignatures(String code) {\n        List\u003cString\u003e signatures \u003d new ArrayList\u003c\u003e();\n        boolean bodyFound;\n        int trackedIndex \u003d 0; // To keep track of where to start the next search\n        do {\n            bodyFound \u003d false;\n            String[] lines \u003d code.substring(trackedIndex).split(\"\\n\");\n            int localIndex \u003d trackedIndex; // Adjust local index due to substring\n\n            for (String line : lines) {\n                line \u003d line.trim();\n                if (!line.isEmpty()) {\n                    int signatureStartIndex \u003d code.indexOf(line, localIndex);\n                    if (signatureStartIndex !\u003d -1) {\n                        String signatureToCheck \u003d findSignature(code, signatureStartIndex);\n                        if (signatureToCheck !\u003d null) {\n                            int endOfSignature \u003d signatureStartIndex + signatureToCheck.length();\n                            if (isMethodOrConstructorSignature(signatureToCheck)) {\n                                signatures.add(signatureToCheck);\n                            }\n                            localIndex \u003d endOfSignature; // Move past this signature\n                        }\n                    }\n                }\n            }\n            trackedIndex \u003d localIndex; // Update tracked index for next iteration\n        } while (bodyFound);\n\n        return signatures;\n    }","modification":"I need a better loop for this","suggestedCodeBeforeRestoration":"public List\u003cString\u003e collectMethodOrConstructorSignatures(String code) {\n       List\u003cString\u003e signatures \u003d new ArrayList\u003c\u003e();\n       int trackedIndex \u003d 0; \n       boolean bodyFound \u003d true;    \n       String[] lines;\n   \n       while (bodyFound) {\n           bodyFound \u003d false;  // Resets the flag used to determine if a body of a method or constructor has been found\n           lines \u003d code.substring(trackedIndex).split(\"\\n\");\n           int localIndex \u003d trackedIndex; \n   \n           for (String line : lines) {\n               line \u003d line.trim();\n               if (!line.isEmpty()) {\n                   int signatureStartIndex \u003d code.indexOf(line, localIndex);\n                   if (signatureStartIndex !\u003d -1) {\n                       String signatureToCheck \u003d findSignature(code, signatureStartIndex);\n                       if (signatureToCheck !\u003d null) {\n                           int endOfSignature \u003d signatureStartIndex + signatureToCheck.length();\n                           if (isMethodOrConstructorSignature(signatureToCheck)) {\n                               signatures.add(signatureToCheck);\n                               bodyFound \u003d true;  // Body of a method or constructor has been found and added\n                           }\n                           localIndex \u003d endOfSignature;\n                       }\n                       else {\n                           // If signatureToCheck is null, there are no more methods or constructors. Time to end the loop\n                           bodyFound \u003d false;\n                       }\n                   }\n               }\n           }\n   \n           trackedIndex \u003d localIndex; \n       }\n       return signatures;\n   }\n","suggestedCode":"public List\u003cString\u003e collectMethodOrConstructorSignatures(String code) {\n       List\u003cString\u003e signatures \u003d new ArrayList\u003c\u003e();\n       int trackedIndex \u003d 0; \n       boolean bodyFound \u003d true;    \n       String[] lines;\n   \n       while (bodyFound) {\n           bodyFound \u003d false;  // Resets the flag used to determine if a body of a method or constructor has been found\n           lines \u003d code.substring(trackedIndex).split(\"\\n\");\n           int localIndex \u003d trackedIndex; \n   \n           for (String line : lines) {\n               line \u003d line.trim();\n               if (!line.isEmpty()) {\n                   int signatureStartIndex \u003d code.indexOf(line, localIndex);\n                   if (signatureStartIndex !\u003d -1) {\n                       String signatureToCheck \u003d findSignature(code, signatureStartIndex);\n                       if (signatureToCheck !\u003d null) {\n                           int endOfSignature \u003d signatureStartIndex + signatureToCheck.length();\n                           if (isMethodOrConstructorSignature(signatureToCheck)) {\n                               signatures.add(signatureToCheck);\n                               bodyFound \u003d true;  // Body of a method or constructor has been found and added\n                           }\n                           localIndex \u003d endOfSignature;\n                       }\n                       else {\n                           // If signatureToCheck is null, there are no more methods or constructors. Time to end the loop\n                           bodyFound \u003d false;\n                       }\n                   }\n               }\n           }\n   \n           trackedIndex \u003d localIndex; \n       }\n       return signatures;\n   }","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":8},"time":{"hour":5,"minute":24,"second":40,"nano":809916420}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":8},"time":{"hour":5,"minute":24,"second":40,"nano":809934390}},"myId":"deadbdd9-ddb0-459d-9460-b09545c4a466","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"6169d699-614b-4acd-8115-62d11fa1c083","modificationType":"MODIFY_SELECTION","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/JavaClassParserServiceImpl.java","subjectLine":"Fix for not checking null in `findImproperlyMergedMethods` method","beforeCode":"public List\u003cMethodDeclaration\u003e findImproperlyMergedMethods(String code) {\n        List\u003cMethodDeclaration\u003e mergedMethods \u003d new ArrayList\u003c\u003e();\n\n        CompilationUnit cu \u003d javaParser.parse(code).getResult().orElse(null);\n        assert cu !\u003d null;\n        cu.accept(new MethodVisitor(), mergedMethods);\n\n        return mergedMethods;\n    }","modification":"Fix for not checking null in `findImproperlyMergedMethods` method.","suggestedCode":"public List\u003cMethodDeclaration\u003e findImproperlyMergedMethods(String code) {\n        List\u003cMethodDeclaration\u003e mergedMethods \u003d new ArrayList\u003c\u003e();\n        \n        CompilationUnit cu \u003d javaParser.parse(code).getResult().orElse(null);\n        if (cu \u003d\u003d null) {\n            System.out.println(\"CompilationUnit is null for code: \" + code);\n            return mergedMethods;\n        }\n        cu.accept(new MethodVisitor(), mergedMethods);\n        \n        return mergedMethods;\n        }\n","modificationSuggestionModificationIds":[],"priorContext":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":8},"time":{"hour":2,"minute":42,"second":26,"nano":31834212}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":8},"time":{"hour":2,"minute":42,"second":26,"nano":31852407}},"myId":"6eb3b544-b3ea-4b65-a1a6-01cec19d09c4","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"b3d64367-7242-447d-918c-7de20dfc26a5","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/FusedMethodHandlerServiceImpl.java","subjectLine":"Replace method declarations with constructor declarations","beforeCode":"package com.translator.service.codactor.test;\n\nimport com.github.javaparser.ast.body.BodyDeclaration;\nimport com.github.javaparser.ast.body.MethodDeclaration;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FusedMethodHandlerServiceImpl implements FusedMethodHandlerService {\n    private JavaClassParserService javaClassParserService;\n    private MethodDeclarationService methodDeclarationService;\n    private JavaClassManipulatorService javaClassManipulatorService;\n    private DiffStringService diffStringService;\n\n    public FusedMethodHandlerServiceImpl() {\n        this.javaClassParserService \u003d new JavaClassParserServiceImpl();\n        this.methodDeclarationService \u003d new MethodDeclarationServiceImpl();\n        this.javaClassManipulatorService \u003d new JavaClassManipulatorServiceImpl();\n        this.diffStringService \u003d new DiffStringServiceImpl();\n    }\n\n    public String fixImproperlyFusedMethods(String beforeCode, String afterCode, String diffCode) {\n        String diffCodeWithoutDiff \u003d diffCode.replace(\"-[-]-\", \"\")\n                .replace(\"-[\u003d]-\", \"\")\n                .replace(\"-[+]-\", \"\");\n        List\u003cMethodDeclaration\u003e improperlyFusedMethods \u003d javaClassParserService.findImproperlyMergedMethods(diffCodeWithoutDiff);\n        if (improperlyFusedMethods !\u003d null \u0026\u0026 !improperlyFusedMethods.isEmpty()) {\n            List\u003cBodyDeclaration\u003c?\u003e\u003e beforeMethods \u003d javaClassParserService.collectMethodsAndConstructors(beforeCode);\n            List\u003cBodyDeclaration\u003c?\u003e\u003e beforeOnlyMethods \u003d new ArrayList\u003c\u003e(beforeMethods);\n            List\u003cBodyDeclaration\u003c?\u003e\u003e afterMethods \u003d javaClassParserService.collectMethodsAndConstructors(afterCode);\n            List\u003cBodyDeclaration\u003c?\u003e\u003e maintainedMethods \u003d new ArrayList\u003c\u003e();\n\n            for (MethodDeclaration afterMethod : afterMethods) {\n                for (MethodDeclaration beforeMethod : beforeMethods) {\n                    if (beforeMethod.getNameAsString().equals(afterMethod.getNameAsString()) \u0026\u0026 beforeMethod.getParameters().equals(afterMethod.getParameters())) {\n                        maintainedMethods.add(afterMethod);\n                        beforeOnlyMethods.remove(beforeMethod);\n                        break;\n                    }\n                }\n            }\n\n            List\u003cMethodDeclaration\u003e allUniqueMethods \u003d new ArrayList\u003c\u003e();\n            allUniqueMethods.addAll(beforeOnlyMethods);\n            allUniqueMethods.addAll(afterMethods);\n            for (MethodDeclaration improperlyFusedMethod : improperlyFusedMethods) {\n                List\u003cMethodDeclaration\u003e containedMethods \u003d new ArrayList\u003c\u003e();\n                String improperlyFusedMethodString \u003d methodDeclarationService.getMethodFromString(improperlyFusedMethod, diffCodeWithoutDiff);\n                for (MethodDeclaration uniqueMethod : allUniqueMethods) {\n                    //Get the title line of the uniqueMethod:\n                    String parameters \u003d uniqueMethod.getParameters().stream()\n                            .map(p -\u003e p.getType().toString() + \" \" + p.getName().toString())\n                            .collect(Collectors.joining(\", \"));\n                    String uniqueMethodTitleLine \u003d uniqueMethod.getNameAsString() + \"(\" + parameters + \")\";\n\n                    if (improperlyFusedMethodString.contains(uniqueMethodTitleLine)) {\n                        containedMethods.add(uniqueMethod);\n                    }\n                }\n                List\u003cMethodDeclaration\u003e beforeContainedMethods \u003d new ArrayList\u003c\u003e();\n                List\u003cMethodDeclaration\u003e afterContainedMethods \u003d new ArrayList\u003c\u003e();\n                List\u003cMethodDeclaration\u003e maintainedContainedMethods \u003d new ArrayList\u003c\u003e();\n                for (MethodDeclaration containedMethod : containedMethods) {\n                    if (beforeOnlyMethods.contains(containedMethod)) {\n                        beforeContainedMethods.add(containedMethod);\n                    } else if (maintainedMethods.contains(containedMethod)) {\n                        maintainedContainedMethods.add(containedMethod);\n                    } else {\n                        afterContainedMethods.add(containedMethod);\n                    }\n                }\n                for (MethodDeclaration containedMethod : beforeContainedMethods) {\n                    String containedMethodString \u003d methodDeclarationService.getMethodFromString(containedMethod, beforeCode);\n                    diffCode \u003d diffStringService.replaceConsideringDiffMarkers(diffCode, improperlyFusedMethodString, containedMethodString, DiffType.REMOVE);\n                    /*newString.append(containedMethodString);\n                    if (i \u003c beforeContainedMethods.size() - 1) {\n                        newString.append(\"\\n\\n\");\n                    }*/\n                }\n                for (MethodDeclaration containedMethod : maintainedContainedMethods) {\n                    String containedMethodString \u003d methodDeclarationService.getMethodFromString(containedMethod, afterCode);\n                    diffCode \u003d diffStringService.replaceConsideringDiffMarkers(diffCode, improperlyFusedMethodString, containedMethodString, DiffType.EQUAL);\n                    /*newString.append(containedMethodString);\n                    if (i \u003c beforeContainedMethods.size() - 1) {\n                        newString.append(\"\\n\\n\");\n                    }*/\n                }\n                for (MethodDeclaration containedMethod : afterContainedMethods) {\n                    String containedMethodString \u003d methodDeclarationService.getMethodFromString(containedMethod, afterCode);\n                    diffCode \u003d diffStringService.addMethodToEndOfClass(diffCode, containedMethodString, DiffType.ADD);\n                }\n            }\n        }\n        return diffCode;\n    }\n}\n","modification":"Replace method declarations with constructor declarations","suggestedCode":"for (ConstructorDeclaration afterConstructor : afterConstructors) {\nfor (ConstructorDeclaration beforeConstructor : beforeConstructors) {\nif (beforeConstructor.getParameters().equals(afterConstructor.getParameters())) {\nmaintainedConstructors.add(afterConstructor);\nbeforeOnlyConstructors.remove(beforeConstructor);\nbreak;\n}\n}\n}\n","modificationSuggestionModificationIds":[],"priorContext":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":19,"minute":32,"second":11,"nano":8790337}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":19,"minute":32,"second":11,"nano":8805362}},"myId":"0e1ff20d-dfe9-496a-aeb9-28536172cbf2","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"ce25de82-bb50-46e4-928c-ea17b3e25a53","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/CollectMethodsServiceImpl.java","subjectLine":"Improving code quality: Addition of ConstructorVisitor to identify constructors with improperly merged methods","beforeCode":"package com.translator.service.codactor.test;\n\nimport com.github.javaparser.JavaParser;\nimport com.github.javaparser.ParseException;\nimport com.github.javaparser.ParseResult;\nimport com.github.javaparser.Position;\nimport com.github.javaparser.ast.CompilationUnit;\nimport com.github.javaparser.ast.Node;\nimport com.github.javaparser.ast.body.ConstructorDeclaration;\nimport com.github.javaparser.ast.body.MethodDeclaration;\nimport com.github.javaparser.ast.NodeList;\nimport com.github.javaparser.ast.stmt.BlockStmt;\nimport com.github.javaparser.ast.stmt.Statement;\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CollectMethodsServiceImpl implements CollectMethodsService {\n    private JavaParser javaParser;\n    private MethodDeclarationService methodDeclarationService;\n\n    public CollectMethodsServiceImpl() {\n        this.javaParser \u003d new JavaParser();\n        this.methodDeclarationService \u003d new MethodDeclarationServiceImpl();\n    }\n\n    public List\u003cConstructorDeclaration\u003e collectConstructors(String code) {\n        ParseResult\u003cCompilationUnit\u003e cu \u003d javaParser.parse(code);\n\n        if (!cu.isSuccessful()) {\n            System.out.println(\"Parsing failed for : \" + code);\n            return null;\n        }\n\n        if (cu.getResult().isEmpty()) {\n            System.out.println(\"Parsing failed\");\n            return null;\n        }\n\n        return cu.getResult().get().findAll(ConstructorDeclaration.class);\n    }\n\n    public List\u003cMethodDeclaration\u003e collectMethods(String code) {\n        System.out.println(\"This gets called 1\");\n        ParseResult\u003cCompilationUnit\u003e cu \u003d javaParser.parse(code);\n\n        if (!cu.isSuccessful()) {\n            System.out.println(\"Parsing failed for : \" + code);\n            List\u003cMethodDeclaration\u003e improperlyMergedMethods \u003d findImproperlyMergedMethods(code);\n\n            for (MethodDeclaration method : improperlyMergedMethods) {\n                System.out.println(\"Improperly merged method: \" + methodDeclarationService.getMethodFromString(method, code));\n            }\n            return null;\n        }\n\n        if (cu.getResult().isEmpty()) {\n            System.out.println(\"Parsing failed\");\n            return null;\n        }\n\n        return cu.getResult().get().findAll(MethodDeclaration.class);\n    }\n\n    public List\u003cMethodDeclaration\u003e findImproperlyMergedMethods(String code) {\n        List\u003cMethodDeclaration\u003e mergedMethods \u003d new ArrayList\u003c\u003e();\n\n        CompilationUnit cu \u003d javaParser.parse(code).getResult().orElse(null);\n        cu.accept(new MethodVisitor(), mergedMethods);\n\n        return mergedMethods;\n    }\n\n    private static class MethodVisitor extends VoidVisitorAdapter\u003cList\u003cMethodDeclaration\u003e\u003e {\n        @Override\n        public void visit(MethodDeclaration n, List\u003cMethodDeclaration\u003e mergedMethods) {\n            super.visit(n, mergedMethods);\n            System.out.println(\"###################\");\n            System.out.println(\"Visiting method:\" + n.toString());\n            if (n.getBody().isPresent()) {\n                System.out.println(\"This gets called 1\");\n                BlockStmt body \u003d n.getBody().get();\n                if (body.getStatements().isEmpty()) {\n                    System.out.println(\"This gets called 2\");\n                    // Empty body, potentially merged\n                    mergedMethods.add(n);\n                } else {\n                    System.out.println(\"This gets called 3\");\n                    NodeList\u003cStatement\u003e stmts \u003d body.getStatements();\n                    Node lastStmt \u003d stmts.get(stmts.size() - 1);\n                    if (lastStmt.getBegin().isPresent() \u0026\u0026 n.getEnd().isPresent() \u0026\u0026\n                            lastStmt.getBegin().get().line \u003e n.getEnd().get().line) {\n                        // Last statement starts after method declaration ends, potentially merged\n                        mergedMethods.add(n);\n                    }\n                }\n            }\n        }\n    }\n}\n","modification":"I need to add to this a ConstructorVisitor that in a similar sense, attempts to find consturctors with methods improperly merged into them","suggestedCodeBeforeRestoration":"package com.translator.service.codactor.test;\n\nimport com.github.javaparser.JavaParser;\nimport com.github.javaparser.ParseException;\nimport com.github.javaparser.ParseResult;\nimport com.github.javaparser.Position;\nimport com.github.javaparser.ast.CompilationUnit;\nimport com.github.javaparser.ast.Node;\nimport com.github.javaparser.ast.body.ConstructorDeclaration;\nimport com.github.javaparser.ast.body.MethodDeclaration;\nimport com.github.javaparser.ast.NodeList;\nimport com.github.javaparser.ast.stmt.BlockStmt;\nimport com.github.javaparser.ast.stmt.Statement;\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CollectMethodsServiceImpl implements CollectMethodsService {\n    private JavaParser javaParser;\n    private MethodDeclarationService methodDeclarationService;\n\n    public CollectMethodsServiceImpl() {\n        this.javaParser \u003d new JavaParser();\n        this.methodDeclarationService \u003d new MethodDeclarationServiceImpl();\n    }\n\n    [Code omitted for brevity]\n\n    public List\u003cConstructorDeclaration\u003e findImproperlyMergedConstructors(String code) {\n        List\u003cConstructorDeclaration\u003e mergedConstructors \u003d new ArrayList\u003c\u003e();\n\n        CompilationUnit cu \u003d javaParser.parse(code).getResult().orElse(null);\n        cu.accept(new ConstructorVisitor(), mergedConstructors);\n\n        return mergedConstructors;\n    }\n\n    private static class ConstructorVisitor extends VoidVisitorAdapter\u003cList\u003cConstructorDeclaration\u003e\u003e {\n        @Override\n        public void visit(ConstructorDeclaration n, List\u003cConstructorDeclaration\u003e mergedMethods) {\n            super.visit(n, mergedMethods);\n            System.out.println(\"###################\");\n            System.out.println(\"Visiting constructor:\" + n.toString());\n            if (n.getBody().isPresent()) {\n                System.out.println(\"This gets called 1\");\n                BlockStmt body \u003d n.getBody().get();\n                if (body.getStatements().isEmpty()) {\n                    System.out.println(\"This gets called 2\");\n                    // Empty body, potentially merged\n                    mergedMethods.add(n);\n                } else {\n                    System.out.println(\"This gets called 3\");\n                    NodeList\u003cStatement\u003e stmts \u003d body.getStatements();\n                    Node lastStmt \u003d stmts.get(stmts.size() - 1);\n                    if (lastStmt.getBegin().isPresent() \u0026\u0026 n.getEnd().isPresent() \u0026\u0026\n                            lastStmt.getBegin().get().line \u003e n.getEnd().get().line) {\n                        // Last statement starts after constructor declaration ends, potentially merged\n                        mergedMethods.add(n);\n                    }\n                }\n            }\n        }\n    }\n}\n","suggestedCode":"package com.translator.service.codactor.test;\n\nimport com.github.javaparser.JavaParser;\nimport com.github.javaparser.ParseException;\nimport com.github.javaparser.ParseResult;\nimport com.github.javaparser.Position;\nimport com.github.javaparser.ast.CompilationUnit;\nimport com.github.javaparser.ast.Node;\nimport com.github.javaparser.ast.body.ConstructorDeclaration;\nimport com.github.javaparser.ast.body.MethodDeclaration;\nimport com.github.javaparser.ast.NodeList;\nimport com.github.javaparser.ast.stmt.BlockStmt;\nimport com.github.javaparser.ast.stmt.Statement;\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CollectMethodsServiceImpl implements CollectMethodsService {\n    private JavaParser javaParser;\n    private MethodDeclarationService methodDeclarationService;\n\n    public CollectMethodsServiceImpl() {\n        this.javaParser \u003d new JavaParser();\n        this.methodDeclarationService \u003d new MethodDeclarationServiceImpl();\n    }\n\n    public List\u003cConstructorDeclaration\u003e collectConstructors(String code) {\n        ParseResult\u003cCompilationUnit\u003e cu \u003d javaParser.parse(code);\n\n\n        if (!cu.isSuccessful()) {\n            System.out.println(\"Parsing failed for : \" + code);\n            return null;\n        }\n    public List\u003cConstructorDeclaration\u003e findImproperlyMergedConstructors(String code) {\n        List\u003cConstructorDeclaration\u003e mergedConstructors \u003d new ArrayList\u003c\u003e();\n\n        if (cu.getResult().isEmpty()) {\n            System.out.println(\"Parsing failed\");\n            return null;\n        }\n\n        return cu.getResult().get().findAll(ConstructorDeclaration.class);\n    }\n\n    public List\u003cMethodDeclaration\u003e collectMethods(String code) {\n        System.out.println(\"This gets called 1\");\n        ParseResult\u003cCompilationUnit\u003e cu \u003d javaParser.parse(code);\n\n        if (!cu.isSuccessful()) {\n            System.out.println(\"Parsing failed for : \" + code);\n            List\u003cMethodDeclaration\u003e improperlyMergedMethods \u003d findImproperlyMergedMethods(code);\n\n            for (MethodDeclaration method : improperlyMergedMethods) {\n                System.out.println(\"Improperly merged method: \" + methodDeclarationService.getMethodFromString(method, code));\n            }\n            return null;\n        }\n\n        if (cu.getResult().isEmpty()) {\n            System.out.println(\"Parsing failed\");\n            return null;\n        }\n\n        return cu.getResult().get().findAll(MethodDeclaration.class);\n    }\n        CompilationUnit cu \u003d javaParser.parse(code).getResult().orElse(null);\n        cu.accept(new ConstructorVisitor(), mergedConstructors);\n\n        return mergedConstructors;\n    }\n\n    private static class ConstructorVisitor extends VoidVisitorAdapter\u003cList\u003cConstructorDeclaration\u003e\u003e {\n        @Override\n        public void visit(ConstructorDeclaration n, List\u003cConstructorDeclaration\u003e mergedMethods) {\n            super.visit(n, mergedMethods);\n            System.out.println(\"###################\");\n            System.out.println(\"Visiting constructor:\" + n.toString());\n            if (n.getBody().isPresent()) {\n                System.out.println(\"This gets called 1\");\n                BlockStmt body \u003d n.getBody().get();\n                if (body.getStatements().isEmpty()) {\n                    System.out.println(\"This gets called 2\");\n                    // Empty body, potentially merged\n                    mergedMethods.add(n);\n                } else {\n                    System.out.println(\"This gets called 3\");\n                    NodeList\u003cStatement\u003e stmts \u003d body.getStatements();\n                    Node lastStmt \u003d stmts.get(stmts.size() - 1);\n                    if (lastStmt.getBegin().isPresent() \u0026\u0026 n.getEnd().isPresent() \u0026\u0026\n                            lastStmt.getBegin().get().line \u003e n.getEnd().get().line) {\n                        // Last statement starts after constructor declaration ends, potentially merged\n                        mergedMethods.add(n);\n                    }\n                }\n            }\n        }\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":5,"minute":8,"second":11,"nano":593892693}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":5,"minute":8,"second":11,"nano":593910028}},"myId":"f0a761fd-b102-4ba1-a586-4f27c6731ef4","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"239e926d-e7b1-4a03-9ad2-9a5a7d492e84","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that print \"Hello World Two!\"","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that print \"Hello World Two!\"","suggestedCodeBeforeRestoration":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n    \n    // [Code omitted for brevity]\n\n    public void printWohooWorldOne() {\n        System.out.println(\"Wohoo World One!\");\n    }\n    \n    public void printHelloWorldTwo() {\n        System.out.println(\"Hello World Two!\");\n    }\n\n}\n","suggestedCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n    \n\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    \n    public void printHelloWorldTwo() {\n        System.out.println(\"Hello World Two!\");\n\n    }\n\n    public void printWohooWorldOne() {\n        System.out.println(\"Wohoo World One!\");\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":4,"minute":57,"second":45,"nano":79347388}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":4,"minute":57,"second":45,"nano":79367896}},"myId":"29e9ec78-dd38-4020-bcee-d534fb6ed120","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"f8bde2b4-6cf9-4708-9887-3ca9ed0c8a9c","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","suggestedCodeBeforeRestoration":"package com.translator.service.modification;\n\n// [Import statements omitted for brevity]\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    \n    // [Code omitted for brevity]\n\n    // Method to print \"Whoo World One!\"\n    public void printHelloWorld() {\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    // Method to print all prime numbers below 100\n    public void printPrimeNumbers() {\n        for(int num \u003d 2; num \u003c 100; num++) {\n            boolean isPrime \u003d true;\n            for(int i \u003d 2; i \u003c\u003d Math.sqrt(num); i++) {\n                if(num % i \u003d\u003d 0) {\n                    isPrime \u003d false;\n                    break;\n                }\n            }\n            if(isPrime) {\n                System.out.println(num);\n            }\n        }\n    }\n}\n","suggestedCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n    \n\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    // Method to print \"Whoo World One!\"\n    public void printHelloWorld() {\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    // Method to print all prime numbers below 100\n    public void printPrimeNumbers() {\n        for(int num \u003d 2; num \u003c 100; num++) {\n            boolean isPrime \u003d true;\n            for(int i \u003d 2; i \u003c\u003d Math.sqrt(num); i++) {\n                if(num % i \u003d\u003d 0) {\n                    isPrime \u003d false;\n                    break;\n                }\n            }\n            if(isPrime) {\n                System.out.println(num);\n            }\n        }\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":4,"minute":57,"second":14,"nano":495944662}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":4,"minute":57,"second":14,"nano":495964186}},"myId":"2d684403-6c23-4184-8a80-6b9085a56d47","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"f5d5ad5d-a39a-4c2a-91c3-c1f3e6673738","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/string/diff/MethodDeclarationServiceImpl.java","subjectLine":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","beforeCode":"package com.translator.service.string.diff;\n\nimport com.github.javaparser.Position;\nimport com.github.javaparser.ast.body.MethodDeclaration;\nimport com.translator.service.string.diff.MethodDeclarationService;\n\npublic class MethodDeclarationServiceImpl implements MethodDeclarationService {\n    public String getMethodFromString(MethodDeclaration methodDeclaration, String code) {\n        return code.substring(getIndexOfBeginningOfLineOfPosition(methodDeclaration.getBegin().get(), code), positionToIndex(methodDeclaration.getEnd().get(), code) + 1);\n    }\n\n    public String getMethodFromStringWithoutEndBracket(MethodDeclaration methodDeclaration, String code) {\n        return code.substring(positionToIndex(methodDeclaration.getBegin().get(), code), positionToIndex(methodDeclaration.getEnd().get(), code));\n    }\n\n    public int positionToIndex(Position pos, String code) {\n        int index \u003d 0;\n        int line \u003d 1;\n        int column \u003d 1;\n        while (line \u003c pos.line || (line \u003d\u003d pos.line \u0026\u0026 column \u003c pos.column)) {\n            if (code.charAt(index) \u003d\u003d \u0027\\n\u0027) {\n                line++;\n                column \u003d 1;\n            } else {\n                column++;\n            }\n            index++;\n        }\n        return index;\n    }\n\n    public int getIndexOfBeginningOfLineOfPosition(Position pos, String code) {\n        int index \u003d positionToIndex(pos, code);\n        while (code.charAt(index) !\u003d \u0027\\n\u0027) {\n            index--;\n        }\n        return index + 1;\n    }\n}\n","modification":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","suggestedCodeBeforeRestoration":"package com.translator.service.string.diff;\n\nimport com.github.javaparser.Position;\nimport com.github.javaparser.ast.body.MethodDeclaration;\nimport com.translator.service.string.diff.MethodDeclarationService;\n\npublic class MethodDeclarationServiceImpl implements MethodDeclarationService {\n    public String getMethodFromString(MethodDeclaration methodDeclaration, String code) {\n        return code.substring(getIndexOfBeginningOfLineOfPosition(methodDeclaration.getBegin().get(), code), positionToIndex(methodDeclaration.getEnd().get(), code) + 1);\n    }\n\n    public String getMethodFromStringWithoutEndBracket(MethodDeclaration methodDeclaration, String code) {\n        return code.substring(positionToIndex(methodDeclaration.getBegin().get(), code), positionToIndex(methodDeclaration.getEnd().get(), code));\n    }\n\n    public int positionToIndex(Position pos, String code) {\n        int index \u003d 0;\n        int line \u003d 1;\n        int column \u003d 1;\n        while (line \u003c pos.line || (line \u003d\u003d pos.line \u0026\u0026 column \u003c pos.column)) {\n            if (code.charAt(index) \u003d\u003d \u0027\\n\u0027) {\n                line++;\n                column \u003d 1;\n            } else {\n                column++;\n            }\n            index++;\n        }\n        return index;\n    }\n\n    public int getIndexOfBeginningOfLineOfPosition(Position pos, String code) {\n        int index \u003d positionToIndex(pos, code);\n        while (code.charAt(index) !\u003d \u0027\\n\u0027) {\n            index--;\n        }\n        return index + 1;\n    }\n\n    public void printGreeting() {\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    public void printPrimeNumbers() {\n        for (int i \u003d 2; i \u003c 100; i++) {\n            if (isPrime(i)) {\n                System.out.println(i);\n            }\n        }\n    }\n\n    private boolean isPrime(int num) {\n        for (int i \u003d 2; i * i \u003c\u003d num; i++) {\n            if (num % i \u003d\u003d 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","suggestedCode":"package com.translator.service.string.diff;\n\nimport com.github.javaparser.Position;\nimport com.github.javaparser.ast.body.MethodDeclaration;\nimport com.translator.service.string.diff.MethodDeclarationService;\n\npublic class MethodDeclarationServiceImpl implements MethodDeclarationService {\n    public String getMethodFromString(MethodDeclaration methodDeclaration, String code) {\n        return code.substring(getIndexOfBeginningOfLineOfPosition(methodDeclaration.getBegin().get(), code), positionToIndex(methodDeclaration.getEnd().get(), code) + 1);\n    }\n\n    public String getMethodFromStringWithoutEndBracket(MethodDeclaration methodDeclaration, String code) {\n        return code.substring(positionToIndex(methodDeclaration.getBegin().get(), code), positionToIndex(methodDeclaration.getEnd().get(), code));\n    }\n\n    public int positionToIndex(Position pos, String code) {\n        int index \u003d 0;\n        int line \u003d 1;\n        int column \u003d 1;\n        while (line \u003c pos.line || (line \u003d\u003d pos.line \u0026\u0026 column \u003c pos.column)) {\n            if (code.charAt(index) \u003d\u003d \u0027\\n\u0027) {\n                line++;\n                column \u003d 1;\n            } else {\n                column++;\n            }\n            index++;\n        }\n        return index;\n    }\n\n    public int getIndexOfBeginningOfLineOfPosition(Position pos, String code) {\n        int index \u003d positionToIndex(pos, code);\n        while (code.charAt(index) !\u003d \u0027\\n\u0027) {\n            index--;\n        }\n        return index + 1;\n    }\n\n    public void printGreeting() {\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    public void printPrimeNumbers() {\n        for (int i \u003d 2; i \u003c 100; i++) {\n            if (isPrime(i)) {\n                System.out.println(i);\n            }\n        }\n    }\n\n    private boolean isPrime(int num) {\n        for (int i \u003d 2; i * i \u003c\u003d num; i++) {\n            if (num % i \u003d\u003d 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":4,"minute":56,"second":6,"nano":193436078}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":4,"minute":56,"second":6,"nano":193452802}},"myId":"c5d8bee7-dde2-4ec2-83d6-b63101f7350f","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"c6b44477-d653-4b3a-aa46-1e7ed3b48b28","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","suggestedCodeBeforeRestoration":"package com.translator.service.modification;\n\n// ...[Code omitted for brevity]\n\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    // ...[Code omitted for brevity]\n        \n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        // ...[Code omitted for brevity]\n    }\n    \n    public void printWoohooWorldOne() {\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    public void printPrimesBelow100() {\n        for (int num \u003d 2; num \u003c 100; num++) {\n            boolean isPrime \u003d true;\n            for (int i \u003d 2; i \u003c\u003d num/2; i++) {\n                if ( num % i \u003d\u003d 0) {\n                    isPrime \u003d false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                System.out.println(num);\n            }\n        }\n    }\n}\n","suggestedCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n\n        \n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n\n    }\n    \n    public void printWoohooWorldOne() {\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    public void printPrimesBelow100() {\n        for (int num \u003d 2; num \u003c 100; num++) {\n            boolean isPrime \u003d true;\n            for (int i \u003d 2; i \u003c\u003d num/2; i++) {\n                if ( num % i \u003d\u003d 0) {\n                    isPrime \u003d false;\n                    break;\n                }\n            } else {\n            if (isPrime) {\n                System.out.println(num);\n            }\n        }\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":4,"minute":55,"second":1,"nano":695238593}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":4,"minute":55,"second":1,"nano":695257724}},"myId":"36c5de0b-6731-4eba-9a41-a3eb778f20b7","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"41afc08d-bc2b-457d-a570-f5b81c2bb437","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","suggestedCodeBeforeRestoration":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    // [Code omitted for brevity]\n\n    public void printGreetingOne() {\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    public void printPrimeNumbersBelow100() {\n        for (int i \u003d 2; i \u003c 100; i++) {\n            boolean isPrime \u003d true;\n            for (int j \u003d 2; j \u003c i; j++) {\n                if (i % j \u003d\u003d 0) {\n                    isPrime \u003d false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                System.out.println(i);\n            }\n        }\n    }\n\n}\n","suggestedCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    public void printGreetingOne() {\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    public void printPrimeNumbersBelow100() {\n        for (int i \u003d 2; i \u003c 100; i++) {\n            boolean isPrime \u003d true;\n            for (int j \u003d 2; j \u003c i; j++) {\n                if (i % j \u003d\u003d 0) {\n                    isPrime \u003d false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                System.out.println(i);\n            }\n        }\n\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":4,"minute":53,"second":37,"nano":117772570}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":4,"minute":53,"second":37,"nano":117806698}},"myId":"b4feeef8-0b54-45e6-a766-b85a8ca32b2d","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"446472d3-71fd-47bd-9625-46c802a916ea","modificationType":"MODIFY_SELECTION","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints all prime numbers below 100","suggestedCodeBeforeRestoration":"package com.translator.service.modification;\n\n/*Imports omitted for brevity*/\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n\n   /*Class code omitted for brevity*/\n\n    /*Existing methods omitted for brevity*/\n\n    public void printWohooWorld() {\n        //Method to print \"Wohoo World One!\"\n        System.out.println(\"Wohoo World One!\");\n    }\n\n    public void printPrimeNumbersBelowHundred() {\n        //Method to print all prime numbers below 100\n        System.out.println(\"Prime numbers below 100 are: \");\n        for(int i\u003d2; i\u003c100; i++){\n            boolean isPrime \u003d true;\n            for(int j\u003d2; j\u003ci; j++) {\n                if(i % j \u003d\u003d 0) {\n                    isPrime \u003d false;\n                    break;\n                }\n            }\n            if(isPrime) {\n                System.out.println(i);\n            }\n        }\n    }\n\n  /*Code omitted until this point for brevity*/\n}\n","suggestedCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    public void printPrimeNumbersBelowHundred() {\n        //Method to print all prime numbers below 100\n        System.out.println(\"Prime numbers below 100 are: \");\n        for(int i\u003d2; i\u003c100; i++){\n            boolean isPrime \u003d true;\n            for(int j\u003d2; j\u003ci; j++) {\n                if(i % j \u003d\u003d 0) {\n                    isPrime \u003d false;\n                    break;\n                }\n            }\n            if(isPrime) {\n                System.out.println(i);\n            }\n        }\n\n    }\n\n\n    public void printWohooWorld() {\n        //Method to print \"Wohoo World One!\"\n        System.out.println(\"Wohoo World One!\");\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":4,"minute":48,"second":53,"nano":77058511}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":7},"time":{"hour":4,"minute":48,"second":53,"nano":77075262}},"myId":"ae2c1cae-c7d3-4d63-95c1-3c94e53461cd","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"5b9be440-3ad7-4b91-8d39-221195fdc5a0","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add a method two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints \"Wohoo World Two!\"","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add a method two methods to the end of this class, one that prints \"Wohoo World One!\" and another that prints \"Wohoo World Two!\"","suggestedCodeBeforeRestoration":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n  \n  // [Code omitted for brevity]\n  \n  public void printWorldOne(){\n    System.out.println(\"Wohoo World One!\");\n  }\n  \n  public void printWorldTwo(){\n    System.out.println(\"Wohoo World Two!\");\n  }\n  \n \n}\n","suggestedCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \".\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like?\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n  \n\n  \n  public void printWorldOne(){\n    System.out.println(\"Wohoo World One!\");\n  }\n  \n  public void printWorldTwo(){\n    System.out.println(\"Wohoo World Two!\");\n  }\n  \n \n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":23,"minute":18,"second":55,"nano":875653579}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":23,"minute":18,"second":55,"nano":875744776}},"myId":"45d41a5a-1e05-4b0c-a7c1-75826c57d83e","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"11966dd7-8772-47dd-94ba-a7513e976e87","modificationType":"FIX_SELECTION","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/DiffStringServiceImpl.java","subjectLine":"Unclosed character class at the closing quotation mark in Java code","beforeCode":"        List\u003cString\u003e markers \u003d new ArrayList\u003c\u003e(Arrays.asList(original.split(\"[^-\\\\[-\\\\]-[^-\\\\[\\\\+\\\\]-[^-\\\\[\u003d\\\\]-]+\")));","modification":"Unclosed character class at the closing quotation mark here : \"        List\u003cString\u003e markers \u003d new ArrayList\u003c\u003e(Arrays.asList(original.split(\"[^-\\\\[-\\\\]-[^-\\\\[\\\\+\\\\]-[^-\\\\[\u003d\\\\]-]+\"))); ","suggestedCodeBeforeRestoration":"private String replaceConsideringDiffMarkers(String original, String oldSequence, String newSequence) {\n    List\u003cString\u003e parts \u003d Arrays.asList(original.split(\"(-\\\\[-\\\\]-)|(-\\\\[\\\\+\\\\]-)|(-\\\\[\u003d\\\\]-)\"));\n    List\u003cString\u003e markers \u003d new ArrayList\u003c\u003e(Arrays.asList(original.split(\"[^-(\\\\[-\\\\]-)(-\\\\[\\\\+\\\\]-)(-\\\\[\u003d\\\\]-)]+\")));\n\n    String consolidated \u003d String.join(\"\", parts);\n\n    int startIndex \u003d consolidated.indexOf(oldSequence);\n    if(startIndex \u003d\u003d -1) {\n        return original;\n    }\n    int endIndex \u003d startIndex + oldSequence.length();\n\n    String newConsolidated \u003d consolidated.substring(0, startIndex) + newSequence + consolidated.substring(endIndex);\n\n    StringBuilder reconstructed \u003d new StringBuilder();\n    int currentIndex \u003d 0;\n    for(String marker : markers) {\n        if(currentIndex \u003c newConsolidated.length()) {\n            reconstructed.append(newConsolidated.substring(currentIndex, currentIndex + marker.length())).append(marker);\n            currentIndex +\u003d marker.length();\n        } else {\n            reconstructed.append(marker);\n        }\n    }\n\n    return reconstructed.toString();\n}\nList\u003cString\u003e markers \u003d new ArrayList\u003c\u003e(Arrays.asList(original.split(\"[^-(\\\\[-\\\\]-)(-\\\\[\\\\+\\\\]-)(-\\\\[\u003d\\\\]-)]+\")));\n","suggestedCode":"private String replaceConsideringDiffMarkers(String original, String oldSequence, String newSequence) {\n    List\u003cString\u003e parts \u003d Arrays.asList(original.split(\"(-\\\\[-\\\\]-)|(-\\\\[\\\\+\\\\]-)|(-\\\\[\u003d\\\\]-)\"));\n    List\u003cString\u003e markers \u003d new ArrayList\u003c\u003e(Arrays.asList(original.split(\"[^-(\\\\[-\\\\]-)(-\\\\[\\\\+\\\\]-)(-\\\\[\u003d\\\\]-)]+\")));\n\n    String consolidated \u003d String.join(\"\", parts);\n\n    int startIndex \u003d consolidated.indexOf(oldSequence);\n    if(startIndex \u003d\u003d -1) {\n        return original;\n    }\n    int endIndex \u003d startIndex + oldSequence.length();\n\n    String newConsolidated \u003d consolidated.substring(0, startIndex) + newSequence + consolidated.substring(endIndex);\n\n    StringBuilder reconstructed \u003d new StringBuilder();\n    int currentIndex \u003d 0;\n    for(String marker : markers) {\n        if(currentIndex \u003c newConsolidated.length()) {\n            reconstructed.append(newConsolidated.substring(currentIndex, currentIndex + marker.length())).append(marker);\n            currentIndex +\u003d marker.length();\n        } else {\n            reconstructed.append(marker);\n        }\n    }\n\n    return reconstructed.toString();\n}\nList\u003cString\u003e markers \u003d new ArrayList\u003c\u003e(Arrays.asList(original.split(\"[^-(\\\\[-\\\\]-)(-\\\\[\\\\+\\\\]-)(-\\\\[\u003d\\\\]-)]+\")));","modificationSuggestionModificationIds":[],"priorContext":[{"historicalContextInquiryHolder":{"inquiryId":"f7696be2-c8f2-44cc-908e-52dd8c59e933","includePreviousContext":false,"requestedChats":[]},"historicalContextObjectType":"INQUIRY"},{"historicalContextFileModificationHolder":{"subjectRecordId":"0ea60af9-2da8-4e20-baec-709dff62a260","recordType":"FILE_MODIFICATION_SUGGESTION","includePreviousContext":false,"requestedChats":[]},"historicalContextObjectType":"FILE_MODIFICATION"}]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":23,"minute":16,"second":33,"nano":716910241}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":23,"minute":16,"second":33,"nano":716921761}},"myId":"0ea60af9-2da8-4e20-baec-709dff62a260","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"6854caf6-48ed-4d44-a1dc-7fef7b087392","modificationType":"FIX_SELECTION","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/DiffStringServiceImpl.java","subjectLine":"Problem with sequence spanning across multiple \u0027-[+]-\u0027 blocks","beforeCode":"private String replaceConsideringDiffMarkers(String original, String oldSequence, String newSequence) {\n        // Create patterns for the diff markers\n        String[] patterns \u003d new String[]{\"-\\\\[-\\\\]-\", \"-\\\\[\\\\+\\\\]-\", \"-\\\\[\u003d\\\\]-\"};\n\n        // Split the original string into sections between the diff markers,\n        // and keep track of which diff marker was in front of each section\n        List\u003cString\u003e sections \u003d new ArrayList\u003c\u003e();\n        List\u003cString\u003e precedingMarkers \u003d new ArrayList\u003c\u003e();\n\n        int lastIndex \u003d 0;\n        for (String pattern : patterns) {\n            Pattern p \u003d Pattern.compile(pattern);\n            Matcher m \u003d p.matcher(original);\n            while (m.find()) {\n                String section \u003d original.substring(lastIndex, m.start());\n                sections.add(section);\n                precedingMarkers.add(m.group());\n                lastIndex \u003d m.end();\n            }\n        }\n\n        // Add the last section after the last diff marker\n        sections.add(original.substring(lastIndex));\n\n        // Perform the replacement on each section individually\n        List\u003cString\u003e newSections \u003d sections.stream()\n                .map(s -\u003e s.replace(oldSequence, newSequence))\n                .collect(Collectors.toList());\n\n        // Reassemble the string, putting the diff markers back in their original locations\n        StringBuilder newString \u003d new StringBuilder();\n        for (int i \u003d 0; i \u003c newSections.size(); i++) {\n            if (i \u003c precedingMarkers.size()) {\n                newString.append(precedingMarkers.get(i));\n            }\n            newString.append(newSections.get(i));\n        }\n\n        return newString.toString();\n    }\n","modification":"I located it here, but the problem is this doesnt factor for when the old sequence and new sequence spans across multiple \"-[+]-\" blocks and it needs to","suggestedCodeBeforeRestoration":"private String replaceConsideringDiffMarkers(String original, String oldSequence, String newSequence) {\n        List\u003cString\u003e parts \u003d Arrays.asList(original.split(\"(-\\\\[-\\\\]-)|(-\\\\[\\\\+\\\\]-)|(-\\\\[\u003d\\\\]-)\"));\n        List\u003cString\u003e markers \u003d new ArrayList\u003c\u003e(Arrays.asList(original.split(\"[^-\\\\[-\\\\]-[^-\\\\[\\\\+\\\\]-[^-\\\\[\u003d\\\\]-]+\")));\n    \n        String consolidated \u003d String.join(\"\", parts);\n    \n         int startIndex \u003d consolidated.indexOf(oldSequence);\n         if(startIndex \u003d\u003d -1) {\n             return original;\n         }\n        int endIndex \u003d startIndex + oldSequence.length();\n        \n        String newConsolidated \u003d consolidated.substring(0, startIndex) + newSequence + consolidated.substring(endIndex);\n    \n        StringBuilder reconstructed \u003d new StringBuilder();\n        int currentIndex \u003d 0;\n        for(String marker : markers) {\n            if(currentIndex \u003c newConsolidated.length()) {\n                reconstructed.append(newConsolidated.substring(currentIndex, currentIndex + marker.length())).append(marker);\n                currentIndex +\u003d marker.length();\n            } else {\n                reconstructed.append(marker);\n            }\n        }\n    \n        return reconstructed.toString();\n    }   \n","suggestedCode":"private String replaceConsideringDiffMarkers(String original, String oldSequence, String newSequence) {\n        List\u003cString\u003e parts \u003d Arrays.asList(original.split(\"(-\\\\[-\\\\]-)|(-\\\\[\\\\+\\\\]-)|(-\\\\[\u003d\\\\]-)\"));\n        List\u003cString\u003e markers \u003d new ArrayList\u003c\u003e(Arrays.asList(original.split(\"[^-\\\\[-\\\\]-[^-\\\\[\\\\+\\\\]-[^-\\\\[\u003d\\\\]-]+\")));\n    \n        String consolidated \u003d String.join(\"\", parts);\n    \n         int startIndex \u003d consolidated.indexOf(oldSequence);\n         if(startIndex \u003d\u003d -1) {\n             return original;\n         }\n        int endIndex \u003d startIndex + oldSequence.length();\n        \n        String newConsolidated \u003d consolidated.substring(0, startIndex) + newSequence + consolidated.substring(endIndex);\n    \n        StringBuilder reconstructed \u003d new StringBuilder();\n        int currentIndex \u003d 0;\n        for(String marker : markers) {\n            if(currentIndex \u003c newConsolidated.length()) {\n                reconstructed.append(newConsolidated.substring(currentIndex, currentIndex + marker.length())).append(marker);\n                currentIndex +\u003d marker.length();\n            } else {\n                reconstructed.append(marker);\n            }\n        }\n    \n        return reconstructed.toString();\n    }   ","modificationSuggestionModificationIds":[],"priorContext":[{"historicalContextInquiryHolder":{"inquiryId":"f7696be2-c8f2-44cc-908e-52dd8c59e933","includePreviousContext":false,"requestedChats":[]},"historicalContextObjectType":"INQUIRY"}]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":23,"minute":13,"second":38,"nano":686451768}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":23,"minute":13,"second":38,"nano":686465135}},"myId":"bc67e166-e54a-49a5-8561-e31fc4d1bcf9","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"5f1bd13d-c1df-43d2-bca4-3c2f21302c0d","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/FusedMethodHandlerServiceImpl.java","subjectLine":"Add a new method to handle replacement considering the diff markers, and use it in fixImproperlyFusedMethods","beforeCode":"package com.translator.service.codactor.test;\n\nimport com.github.javaparser.ast.body.MethodDeclaration;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FusedMethodHandlerServiceImpl implements FusedMethodHandlerService {\n    private CollectMethodsService collectMethodsService;\n    private MethodDeclarationService methodDeclarationService;\n    private JavaClassManipulatorService javaClassManipulatorService;\n\n    public FusedMethodHandlerServiceImpl() {\n        this.collectMethodsService \u003d new CollectMethodsServiceImpl();\n        this.methodDeclarationService \u003d new MethodDeclarationServiceImpl();\n        this.javaClassManipulatorService \u003d new JavaClassManipulatorServiceImpl();\n    }\n\n    public String fixImproperlyFusedMethods(String beforeCode, String afterCode, String diffCode) {\n        List\u003cEntry\u003cInteger,String\u003e\u003e markerPositions \u003d new LinkedList\u003c\u003e();\n        String[] markers \u003d new String[]{\"-[-]-\", \"-[+]-\", \"-[\u003d]-\"};\n        for (String marker : markers) {\n            int i \u003d diffCode.indexOf(marker);\n            while (i \u003e\u003d 0) {\n                markerPositions.add(new SimpleEntry\u003c\u003e(i, marker));\n                i \u003d diffCode.indexOf(marker, i + 1);\n            }\n        }\n        String diffCodeWithoutDiff \u003d diffCode.replace(\"-[-]-\", \"\")\n                .replace(\"-[\u003d]-\", \"\")\n                .replace(\"-[+]-\", \"\");\n        //Note: diffCodeWithoutDiff is already missing the last method fixDesktopCodeFileModification by this point\n        System.out.println(\"Diff code: \" + diffCodeWithoutDiff);\n        List\u003cMethodDeclaration\u003e improperlyFusedMethods \u003d collectMethodsService.findImproperlyMergedMethods(diffCodeWithoutDiff);\n        if (improperlyFusedMethods !\u003d null \u0026\u0026 !improperlyFusedMethods.isEmpty()) {\n            List\u003cMethodDeclaration\u003e beforeMethods \u003d collectMethodsService.collectMethods(beforeCode);\n            List\u003cMethodDeclaration\u003e afterMethods \u003d collectMethodsService.collectMethods(afterCode);\n\n            for (MethodDeclaration afterMethod : afterMethods) {\n                for (MethodDeclaration beforeMethod : beforeMethods) {\n                    if (beforeMethod.getNameAsString().equals(afterMethod.getNameAsString()) \u0026\u0026 beforeMethod.getParameters().equals(afterMethod.getParameters())) {\n                        System.out.println(\"Removing: \" + beforeMethod.getBody());\n                        beforeMethods.remove(beforeMethod);\n                        break;\n                    }\n                }\n            }\n\n            List\u003cMethodDeclaration\u003e allUniqueMethods \u003d new ArrayList\u003c\u003e();\n            allUniqueMethods.addAll(beforeMethods);\n            allUniqueMethods.addAll(afterMethods);\n            System.out.println(\"Improperly fused methods size: \" + improperlyFusedMethods.size());\n            for (MethodDeclaration improperlyFusedMethod : improperlyFusedMethods) {\n                List\u003cMethodDeclaration\u003e containedMethods \u003d new ArrayList\u003c\u003e();\n                String improperlyFusedMethodString \u003d methodDeclarationService.getMethodFromString(improperlyFusedMethod, diffCodeWithoutDiff);\n                for (MethodDeclaration uniqueMethod : allUniqueMethods) {\n                    //Get the title line of the uniqueMethod:\n                    String parameters \u003d uniqueMethod.getParameters().stream()\n                            .map(p -\u003e p.getType().toString() + \" \" + p.getName().toString())\n                            .collect(Collectors.joining(\", \"));\n                    String uniqueMethodTitleLine \u003d uniqueMethod.getNameAsString() + \"(\" + parameters + \")\";\n\n\n                    if (improperlyFusedMethodString.contains(uniqueMethodTitleLine)) {\n                        containedMethods.add(uniqueMethod);\n                    }\n                }\n                StringBuilder newString \u003d new StringBuilder();\n                System.out.println(\"Contained method size: \" + containedMethods.size());\n                List\u003cMethodDeclaration\u003e beforeContainedMethods \u003d new ArrayList\u003c\u003e();\n                List\u003cMethodDeclaration\u003e afterContainedMethods \u003d new ArrayList\u003c\u003e();\n                for (int i \u003d 0; i \u003c containedMethods.size(); i++) {\n                    MethodDeclaration containedMethod \u003d containedMethods.get(i);\n                    System.out.println(\"Contained method: \" + containedMethod);\n                    if (beforeMethods.contains(containedMethod)) {\n                        beforeContainedMethods.add(containedMethod);\n                    } else {\n                        afterContainedMethods.add(containedMethod);\n                    }\n                }\n                for (int i \u003d 0; i \u003c beforeContainedMethods.size(); i++) {\n                    MethodDeclaration containedMethod \u003d beforeContainedMethods.get(i);\n                    String containedMethodString \u003d methodDeclarationService.getMethodFromString(containedMethod, beforeCode);\n                    newString.append(containedMethodString);\n                    if (i \u003c beforeContainedMethods.size() - 1) {\n                        newString.append(\"\\n\\n\");\n                    }\n                }\n                System.out.println(\"New string: \" + newString);\n                System.out.println(\"Diff code 1: \" + diffCodeWithoutDiff);\n                diffCodeWithoutDiff \u003d diffCodeWithoutDiff.replace(improperlyFusedMethodString, newString.toString());\n                System.out.println(\"Diff code 2: \" + diffCodeWithoutDiff);\n                for (MethodDeclaration afterContainedMethod : afterContainedMethods) {\n                    System.out.println(\"After contained method: \" + afterContainedMethod);\n                    String containedMethodString \u003d methodDeclarationService.getMethodFromString(afterContainedMethod, afterCode);\n                    diffCodeWithoutDiff \u003d javaClassManipulatorService.addMethodToEndOfClass(diffCodeWithoutDiff, containedMethodString.trim());\n                }\n            }\n        }\n        return diffCodeWithoutDiff;\n    }\n\n}\n","modification":"Add a new method to handle replacement considering the diff markers, and use it in fixImproperlyFusedMethods","suggestedCode":"private String replaceConsideringDiffMarkers(String original, String oldSequence, String newSequence) {\n// Create patterns for the diff markers\nString[] patterns \u003d new String[]{\"-\\\\[-\\\\]-\", \"-\\\\[\\\\+\\\\]-\", \"-\\\\[\u003d\\\\]-\"};\n\n// Split the original string into sections between the diff markers,\n// and keep track of which diff marker was in front of each section\nList\u003cString\u003e sections \u003d new ArrayList\u003c\u003e();\nList\u003cString\u003e precedingMarkers \u003d new ArrayList\u003c\u003e();\n\nint lastIndex \u003d 0;\nfor (String pattern : patterns) {\n    Pattern p \u003d Pattern.compile(pattern);\n    Matcher m \u003d p.matcher(original);\n    while (m.find()) {\n        String section \u003d original.substring(lastIndex, m.start());\n        sections.add(section);\n        precedingMarkers.add(m.group());\n        lastIndex \u003d m.end();\n    }\n}\n\n// Add the last section after the last diff marker\nsections.add(original.substring(lastIndex));\n\n// Perform the replacement on each section individually\nList\u003cString\u003e newSections \u003d sections.stream()\n    .map(s -\u003e s.replace(oldSequence, newSequence))\n    .collect(Collectors.toList());\n\n// Reassemble the string, putting the diff markers back in their original locations\nStringBuilder newString \u003d new StringBuilder();\nfor (int i \u003d 0; i \u003c newSections.size(); i++) {\n    if (i \u003c precedingMarkers.size()) {\n        newString.append(precedingMarkers.get(i));\n    }\n    newString.append(newSections.get(i));\n}\n\nreturn newString.toString();\n}\n\npublic String fixImproperlyFusedMethods(String beforeCode, String afterCode, String diffCode) {\nString diffCodeWithoutDiff \u003d replaceConsideringDiffMarkers(diffCode, \"-[-]-\", \"\")\n        .replace(\"-[+]-\", \"\")\n        .replace(\"-[\u003d]-\", \"\");\n// ...\n}\n","modificationSuggestionModificationIds":[],"priorContext":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":6,"minute":9,"second":23,"nano":203398689}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":6,"minute":9,"second":23,"nano":203605563}},"myId":"3e854881-6279-4d93-801d-fe019565eac0","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"4db2d8a9-8c2e-4eb8-a17d-2bf953dcacbb","modificationType":"MODIFY_SELECTION","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/DiffStringServiceImpl.java","subjectLine":"I need it to actually remove it from the array","beforeCode":"private String removeAllPositiveTextAboveLine(int lineIndex, String[] lines) {\n        for (int i \u003d lineIndex - 1; i \u003e\u003d 0; i--) {\n            String trimmedLineAbove \u003d lines[i].trim();\n            if (!trimmedLineAbove.startsWith(\"-[+]-\")) {\n                break;\n            }\n            lines[i] \u003d \"\";\n        }\n        return String.join(\"\\n\", lines);\n    }","modification":"I need it to actually remove it from the array","suggestedCodeBeforeRestoration":"private String[] removeAllPositiveTextAboveLine(int lineIndex, String[] lines) {\n        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e(Arrays.asList(lines));\n    \n        for (int i \u003d lineIndex - 1; i \u003e\u003d 0; i--) {\n            String trimmedLineAbove \u003d list.get(i).trim();\n            if (!trimmedLineAbove.startsWith(\"-[+]-\")) {\n                break;\n            }\n            list.remove(i);\n        }\n        // Convert list back to array.\n        String[] newLines \u003d list.toArray(new String[list.size()]);\n        \n        // Your \u0027Done\u0027 comment.\n    \n        return newLines;\n    }\n","suggestedCode":"private String[] removeAllPositiveTextAboveLine(int lineIndex, String[] lines) {\n        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e(Arrays.asList(lines));\n    \n        for (int i \u003d lineIndex - 1; i \u003e\u003d 0; i--) {\n            String trimmedLineAbove \u003d list.get(i).trim();\n            if (!trimmedLineAbove.startsWith(\"\")) {\n                break;\n            }\n            list.remove(i);\n        }\n        // Convert list back to array.\n        String[] newLines \u003d list.toArray(new String[list.size()]);\n        \n        // Your \u0027Done\u0027 comment.\n    \n        return newLines;\n    }","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":6,"minute":8,"second":21,"nano":542390257}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":6,"minute":8,"second":21,"nano":542412073}},"myId":"fb085974-4667-4a58-8c11-30e9a505b5bb","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"c1735867-20c3-47ac-bda9-67cc1f3ff536","modificationType":"MODIFY_SELECTION","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/DiffStringServiceImpl.java","subjectLine":"Have this not remove the content on the line index","beforeCode":"private String removeAllPositiveTextAboveLine(int lineIndex, String[] lines) {\n        for (int i \u003d lineIndex; i \u003e\u003d 0; i--) {\n            String trimmedLineAbove \u003d lines[i].trim();\n            if (!trimmedLineAbove.startsWith(\"-[+]-\")) {\n                break;\n            }\n            lines[i] \u003d \"\";\n        }\n        return String.join(\"\\n\", lines);\n    }","modification":"Have this not remove the content on the line index","suggestedCodeBeforeRestoration":"private String removeAllPositiveTextAboveLine(int lineIndex, String[] lines) {\n        for (int i \u003d lineIndex - 1; i \u003e\u003d 0; i--) { // Modified to not affect the content on line index\n            String trimmedLineAbove \u003d lines[i].trim();\n            if (!trimmedLineAbove.startsWith(\"-[+]-\")) {\n                break;\n            }\n            lines[i] \u003d \"\";\n        }\n        return String.join(\"\\n\", lines);\n    }\n","suggestedCode":"private String removeAllPositiveTextAboveLine(int lineIndex, String[] lines) {\n        for (int i \u003d lineIndex - 1; i \u003e\u003d 0; i--) { // Modified to not affect the content on line index\n            String trimmedLineAbove \u003d lines[i].trim();\n            if (!trimmedLineAbove.startsWith(\"\")) {\n                break;\n            }\n            lines[i] \u003d \"\";\n        }\n        return String.join(\"\\n\", lines);\n    }","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":5,"minute":51,"second":24,"nano":402591847}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":5,"minute":51,"second":24,"nano":402607762}},"myId":"3aec5b9c-2cb2-4071-824d-a9117a294d4e","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"78bec6b9-475e-4c2a-9f2c-14106219ef03","modificationType":"MODIFY_SELECTION","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/DiffStringServiceImpl.java","subjectLine":"Modifying string matching conditions to include two nested loops","beforeCode":"public String postProcessDiffString(String diffString) {\n        String[] lines \u003d diffString.split(\"\\n\");\n        String closingBracketLine \u003d null;\n        String matchCheckerLine \u003d null;\n        Integer closingBracketLineIndex \u003d null;\n        Integer replacementLineIndex \u003d null;\n\n        for (int i \u003d 0; i \u003c lines.length; i++) {\n            String trimmedLine \u003d lines[i].trim();\n            String trimmedLineWithoutTags \u003d trimmedLine.replace(\"-[\u003d]-\", \"\").replace(\"-[-]-\", \"\").replace(\"-[+]-\", \"\").trim();\n\n            if (closingBracketLine \u003d\u003d null \u0026\u0026 trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 (trimmedLine.endsWith(\"}\") || trimmedLine.endsWith(\"};\") || trimmedLine.endsWith(\"});\"))) {\n                closingBracketLine \u003d lines[i];\n                closingBracketLineIndex \u003d i;\n                matchCheckerLine \u003d closingBracketLine.replace(\"-[\u003d]-\", \"-[-]-\");\n            } else if (matchCheckerLine !\u003d null \u0026\u0026 lines[i].startsWith(matchCheckerLine)) {\n                replacementLineIndex \u003d i;\n            } else if (closingBracketLine !\u003d null \u0026\u0026 trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 !trimmedLineWithoutTags.isEmpty()) {\n                closingBracketLine \u003d null;\n                matchCheckerLine \u003d null;\n                if (replacementLineIndex !\u003d null) {\n                    lines[replacementLineIndex] \u003d lines[replacementLineIndex].replace(\"-[-]-\", \"-[\u003d]-\");\n                    lines[closingBracketLineIndex] \u003d lines[closingBracketLineIndex].replace(\"-[\u003d]-\", \"-[-]-\");\n                    replacementLineIndex \u003d null;\n                    closingBracketLineIndex \u003d null;\n                }\n            }\n        }\n\n        return String.join(\"\\n\", lines);\n    }","modification":"That doesnt quite work, and its too simple for what I want. Once it finds the string that meets these conditions: \"trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 (trimmedLine.endsWith(\"}\") || trimmedLine.endsWith(\"};\") || trimmedLine.endsWith(\"});\"))) {\n            \" it needs to first, continue going up to select all -[+]- immediately above it, and then start going back down to the bottom to find the lowest matched line to replace, then does that, then proceeds to continue going up.\nThe gist is that there need to be two nested loops inside of the larger loop","suggestedCodeBeforeRestoration":"public String postProcessDiffString(String diffString) {\n        String[] lines \u003d diffString.split(\"\\n\");\n        String closingBracketLine \u003d null;\n        String matchCheckerLine \u003d null;\n        Integer closingBracketLineIndex \u003d null;\n        Integer replacementLineIndex \u003d null;\n        int firstChangeIndex \u003d -1;\n    \n        for (int i \u003d 0; i \u003c lines.length; i++) {\n            String trimmedLine \u003d lines[i].trim();\n            String trimmedLineWithoutTags \u003d trimmedLine.replace(\"-[\u003d]-\", \"\").replace(\"-[-]-\", \"\").replace(\"-[+]-\", \"\").trim();\n    \n            if (closingBracketLine \u003d\u003d null \u0026\u0026 trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 (trimmedLine.endsWith(\"}\") || trimmedLine.endsWith(\"};\") || trimmedLine.endsWith(\"});\"))) {\n                closingBracketLine \u003d lines[i];\n                closingBracketLineIndex \u003d i;\n                matchCheckerLine \u003d closingBracketLine.replace(\"-[\u003d]-\", \"-[-]-\");\n    \n                int j \u003d closingBracketLineIndex - 1;\n                while (j \u003e\u003d 0 \u0026\u0026 lines[j].startsWith(\"-[+]-\")) {\n                    j--;\n                }\n                firstChangeIndex \u003d j + 1;\n            } else if (matchCheckerLine !\u003d null \u0026\u0026 lines[i].startsWith(matchCheckerLine)) {\n                replacementLineIndex \u003d i;\n                for (int k \u003d firstChangeIndex; k \u003c closingBracketLineIndex; k++) {\n                    lines[k] \u003d lines[k].replace(\"-[+]-\", \"-[\u003d]-\");\n                }\n                closingBracketLine \u003d null;\n                matchCheckerLine \u003d null;\n                replacementLineIndex \u003d null;\n                closingBracketLineIndex \u003d null;\n            } else if (closingBracketLine !\u003d null \u0026\u0026 trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 !trimmedLineWithoutTags.isEmpty()) {\n                closingBracketLine \u003d null;\n                matchCheckerLine \u003d null;\n                if (replacementLineIndex !\u003d null) {\n                    lines[replacementLineIndex] \u003d lines[replacementLineIndex].replace(\"-[-]-\", \"-[\u003d]-\");\n                    lines[closingBracketLineIndex] \u003d lines[closingBracketLineIndex].replace(\"-[\u003d]-\", \"-[-]-\");\n                    replacementLineIndex \u003d null;\n                    closingBracketLineIndex \u003d null;\n                }\n            }\n        }\n        \n        return String.join(\"\\n\", lines);\n    }\n","suggestedCode":"public String postProcessDiffString(String diffString) {\n        String[] lines \u003d diffString.split(\"\\n\");\n        String closingBracketLine \u003d null;\n        String matchCheckerLine \u003d null;\n        Integer closingBracketLineIndex \u003d null;\n        Integer replacementLineIndex \u003d null;\n        int firstChangeIndex \u003d -1;\n    \n        for (int i \u003d 0; i \u003c lines.length; i++) {\n            String trimmedLine \u003d lines[i].trim();\n    \n            if (closingBracketLine \u003d\u003d null \u0026\u0026 trimmedLine.startsWith(\"\") \u0026\u0026 (trimmedLine.endsWith(\"}\") || trimmedLine.endsWith(\"};\") || trimmedLine.endsWith(\"});\"))) {\n                closingBracketLine \u003d lines[i];\n                closingBracketLineIndex \u003d i;\n    \n                int j \u003d closingBracketLineIndex - 1;\n                while (j \u003e\u003d 0 \u0026\u0026 lines[j].startsWith(\"\")) {\n                    j--;\n                }\n                firstChangeIndex \u003d j + 1;\n            } else if (matchCheckerLine !\u003d null \u0026\u0026 lines[i].startsWith(matchCheckerLine)) {\n                replacementLineIndex \u003d i;\n                for (int k \u003d firstChangeIndex; k \u003c closingBracketLineIndex; k++) {\n                    lines[k] \u003d lines[k].replace(\"\", \"\");\n                }\n                closingBracketLine \u003d null;\n                matchCheckerLine \u003d null;\n                replacementLineIndex \u003d null;\n                closingBracketLineIndex \u003d null;\n            } else if (closingBracketLine !\u003d null \u0026\u0026 trimmedLine.startsWith(\"\") \u0026\u0026 !trimmedLineWithoutTags.isEmpty()) {\n                closingBracketLine \u003d null;\n                matchCheckerLine \u003d null;\n                if (replacementLineIndex !\u003d null) {\n                    replacementLineIndex \u003d null;\n                    closingBracketLineIndex \u003d null;\n                }\n            }\n        }\n        \n        return String.join(\"\\n\", lines);\n    }","modificationSuggestionModificationIds":[],"priorContext":[{"historicalContextFileModificationHolder":{"subjectRecordId":"79b71abc-cb30-4f5b-adeb-f1a23df06748","recordType":"FILE_MODIFICATION_SUGGESTION","includePreviousContext":false,"requestedChats":[]},"historicalContextObjectType":"FILE_MODIFICATION"}]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":5,"minute":49,"second":50,"nano":526063654}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":5,"minute":49,"second":50,"nano":526085282}},"myId":"5d475e87-6bd2-4c41-b2f9-292f2e03e983","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"e198222e-192e-4155-a709-3a5e4260e517","modificationType":"MODIFY_SELECTION","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/DiffStringServiceImpl.java","subjectLine":"Modification for Finding and Replacing Desired String in Code","beforeCode":"public String postProcessDiffString(String diffString) {\n        String[] lines \u003d diffString.split(\"\\n\");\n        String closingBracketLine \u003d null;\n        String matchCheckerLine \u003d null;\n        Integer closingBracketLineIndex \u003d null;\n        Integer replacementLineIndex \u003d null;\n\n        for (int i \u003d 0; i \u003c lines.length; i++) {\n            String trimmedLine \u003d lines[i].trim();\n            String trimmedLineWithoutTags \u003d trimmedLine.replace(\"-[\u003d]-\", \"\").replace(\"-[-]-\", \"\").replace(\"-[+]-\", \"\").trim();\n\n            if (closingBracketLine \u003d\u003d null \u0026\u0026 trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 (trimmedLine.endsWith(\"}\") || trimmedLine.endsWith(\"};\") || trimmedLine.endsWith(\"});\"))) {\n                closingBracketLine \u003d lines[i];\n                closingBracketLineIndex \u003d i;\n                matchCheckerLine \u003d closingBracketLine.replace(\"-[\u003d]-\", \"-[-]-\");\n            } else if (matchCheckerLine !\u003d null \u0026\u0026 lines[i].startsWith(matchCheckerLine)) {\n                replacementLineIndex \u003d i;\n            } else if (closingBracketLine !\u003d null \u0026\u0026 trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 !trimmedLineWithoutTags.isEmpty()) {\n                closingBracketLine \u003d null;\n                matchCheckerLine \u003d null;\n                if (replacementLineIndex !\u003d null) {\n                    lines[replacementLineIndex] \u003d lines[replacementLineIndex].replace(\"-[-]-\", \"-[\u003d]-\");\n                    lines[closingBracketLineIndex] \u003d lines[closingBracketLineIndex].replace(\"-[\u003d]-\", \"-[-]-\");\n                    replacementLineIndex \u003d null;\n                    closingBracketLineIndex \u003d null;\n                }\n            }\n        }\n\n        return String.join(\"\\n\", lines);\n    }","modification":"That doesnt quite work, and its too simple for what I want. Once it finds the string that meets these conditions: \"trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 (trimmedLine.endsWith(\"}\") || trimmedLine.endsWith(\"};\") || trimmedLine.endsWith(\"});\"))) {\n            \" it needs to first, continue going up to select all -[+]- immediately above it, and then start going back down to the bottom to find the lowest matched line to replace, then does that, then proceeds to continue going up.","suggestedCodeBeforeRestoration":"public String postProcessDiffString(String diffString) {\n        String[] lines \u003d diffString.split(\"\\n\");\n        String closingBracketLine \u003d null;\n        String matchCheckerLine \u003d null;\n        String insertLine \u003d null;\n        Integer closingBracketLineIndex \u003d null;\n        Integer replacementLineIndex \u003d null;\n        Integer insertLineIndex \u003d null;\n    \n        for (int i \u003d lines.length - 1; i \u003e\u003d 0; i--) {\n            String trimmedLine \u003d lines[i].trim();\n            String trimmedLineWithoutTags \u003d trimmedLine.replace(\"-[\u003d]-\", \"\").replace(\"-[-]-\", \"\").replace(\"-[+]-\", \"\").trim();\n    \n            if (closingBracketLine \u003d\u003d null \u0026\u0026 trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 (trimmedLine.endsWith(\"}\") || trimmedLine.endsWith(\"};\") || trimmedLine.endsWith(\"});\"))) {\n                closingBracketLine \u003d lines[i];\n                closingBracketLineIndex \u003d i;\n                matchCheckerLine \u003d closingBracketLine.replace(\"-[\u003d]-\", \"-[-]-\");\n            } \n            if (closingBracketLine !\u003d null \u0026\u0026 trimmedLine.startsWith(\"-[+]-\") \u0026\u0026 insertLineIndex \u003d\u003d null){\n                insertLine \u003d lines[i];\n                insertLineIndex \u003d i;\n            }\n            if (matchCheckerLine !\u003d null \u0026\u0026 lines[i].startsWith(matchCheckerLine)) {\n                replacementLineIndex \u003d i;\n            } \n            if (closingBracketLine !\u003d null \u0026\u0026 trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 !trimmedLineWithoutTags.isEmpty() \u0026\u0026 replacementLineIndex !\u003d null) {\n                lines[insertLineIndex] \u003d insertLine.replace(\"-[+]-\", \"-[\u003d]-\");\n                lines[replacementLineIndex] \u003d lines[replacementLineIndex].replace(\"-[-]-\", \"-[\u003d]-\");\n                lines[closingBracketLineIndex] \u003d lines[closingBracketLineIndex].replace(\"-[\u003d]-\", \"-[-]-\");\n                \n                insertLine \u003d null;\n                closingBracketLine \u003d null;\n                matchCheckerLine \u003d null;\n                insertLineIndex \u003d null;\n                replacementLineIndex \u003d null;\n                closingBracketLineIndex \u003d null;\n            }\n        }\n    \n        return String.join(\"\\n\", lines);\n    }\n","suggestedCode":"public String postProcessDiffString(String diffString) {\n        String[] lines \u003d diffString.split(\"\\n\");\n        String closingBracketLine \u003d null;\n        String matchCheckerLine \u003d null;\n        String insertLine \u003d null;\n        Integer closingBracketLineIndex \u003d null;\n        Integer replacementLineIndex \u003d null;\n        Integer insertLineIndex \u003d null;\n    \n        for (int i \u003d lines.length - 1; i \u003e\u003d 0; i--) {\n            String trimmedLine \u003d lines[i].trim();\n    \n            if (closingBracketLine \u003d\u003d null \u0026\u0026 trimmedLine.startsWith(\"\") \u0026\u0026 (trimmedLine.endsWith(\"}\") || trimmedLine.endsWith(\"};\") || trimmedLine.endsWith(\"});\"))) {\n                closingBracketLine \u003d lines[i];\n                closingBracketLineIndex \u003d i;\n            } \n            if (closingBracketLine !\u003d null \u0026\u0026 trimmedLine.startsWith(\"\") \u0026\u0026 insertLineIndex \u003d\u003d null){\n                insertLine \u003d lines[i];\n                insertLineIndex \u003d i;\n            }\n            if (matchCheckerLine !\u003d null \u0026\u0026 lines[i].startsWith(matchCheckerLine)) {\n                replacementLineIndex \u003d i;\n            } \n            if (closingBracketLine !\u003d null \u0026\u0026 trimmedLine.startsWith(\"\") \u0026\u0026 !trimmedLineWithoutTags.isEmpty() \u0026\u0026 replacementLineIndex !\u003d null) {\n                lines[insertLineIndex] \u003d insertLine.replace(\"\", \"\");\n                \n                insertLine \u003d null;\n                closingBracketLine \u003d null;\n                matchCheckerLine \u003d null;\n                insertLineIndex \u003d null;\n                replacementLineIndex \u003d null;\n                closingBracketLineIndex \u003d null;\n            }\n        }\n    \n        return String.join(\"\\n\", lines);\n    }","modificationSuggestionModificationIds":[],"priorContext":[{"historicalContextFileModificationHolder":{"subjectRecordId":"79b71abc-cb30-4f5b-adeb-f1a23df06748","recordType":"FILE_MODIFICATION_SUGGESTION","includePreviousContext":false,"requestedChats":[]},"historicalContextObjectType":"FILE_MODIFICATION"}]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":5,"minute":46,"second":42,"nano":992353117}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":6},"time":{"hour":5,"minute":46,"second":42,"nano":992368997}},"myId":"79b71abc-cb30-4f5b-adeb-f1a23df06748","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"68dcfc72-e984-4b21-bde8-07d474d40c8e","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/codactor-intellij-plugin/src/main/java/com/translator/service/codactor/test/DiffStringServiceImpl.java","subjectLine":"Modify postProcessDiffString to process code from Bottom-Up and handle -[+]- code","beforeCode":"package com.translator.service.codactor.test;\n\nimport com.github.difflib.DiffUtils;\nimport com.github.difflib.patch.AbstractDelta;\nimport com.github.difflib.patch.Patch;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class DiffStringServiceImpl implements DiffStringService {\n    public String getDiffString(String beforeCode, String afterCode) {\n        List\u003cString\u003e beforeLines \u003d Arrays.asList(beforeCode.split(\"\\n\"));\n        List\u003cString\u003e afterLines \u003d Arrays.asList(afterCode.split(\"\\n\"));\n\n        Patch\u003cString\u003e patch \u003d DiffUtils.diff(beforeLines, afterLines);\n        List\u003cAbstractDelta\u003cString\u003e\u003e deltas \u003d patch.getDeltas();\n\n        StringBuilder merged \u003d new StringBuilder();\n        List\u003cPair\u003cInteger, String\u003e\u003e changes \u003d new ArrayList\u003c\u003e();\n        int beforePosition \u003d 0;\n        int afterPosition \u003d 0;\n\n        for (AbstractDelta\u003cString\u003e delta : deltas) {\n\n            while (beforePosition \u003c delta.getSource().getPosition()) {\n                merged.append(\"-[\u003d]-\" + beforeLines.get(beforePosition)).append(\"\\n\");\n                beforePosition++;\n                afterPosition++;\n            }\n\n            switch(delta.getType()) {\n                case DELETE:\n                    for (String line : delta.getSource().getLines()) {\n                        merged.append(\"-[-]-\" + line).append(\"\\n\");\n                        changes.add(new Pair\u003c\u003e(afterPosition, \"-[-]-\"));\n                        afterPosition++;\n                    }\n                    beforePosition +\u003d delta.getSource().getLines().size();\n                    break;\n                case INSERT:\n                    for (String line : delta.getTarget().getLines()) {\n                        merged.append(\"-[+]-\" + line).append(\"\\n\");\n                        changes.add(new Pair\u003c\u003e(afterPosition, \"-[+]-\"));\n                        afterPosition++;\n                    }\n                    break;\n                case CHANGE:\n                    for (String line : delta.getSource().getLines()) {\n                        merged.append(\"-[-]-\" + line).append(\"\\n\");\n                        changes.add(new Pair\u003c\u003e(afterPosition, \"-[-]-\"));\n                        afterPosition++;\n                    }\n                    beforePosition +\u003d delta.getSource().getLines().size();\n                    for (String line : delta.getTarget().getLines()) {\n                        merged.append(\"-[+]-\" + line).append(\"\\n\");\n                        changes.add(new Pair\u003c\u003e(afterPosition, \"-[+]-\"));\n                        afterPosition++;\n                    }\n                    break;\n            }\n        }\n\n        while (beforePosition \u003c beforeLines.size()) {\n            merged.append(\"-[\u003d]-\" + beforeLines.get(beforePosition)).append(\"\\n\");\n            beforePosition++;\n            afterPosition++;\n        }\n        return merged.toString();\n    }\n\n    public String postProcessDiffString(String diffString) {\n        String[] lines \u003d diffString.split(\"\\n\");\n        String closingBracketLine \u003d null;\n        String matchCheckerLine \u003d null;\n        Integer closingBracketLineIndex \u003d null;\n        Integer replacementLineIndex \u003d null;\n\n        for (int i \u003d 0; i \u003c lines.length; i++) {\n            String trimmedLine \u003d lines[i].trim();\n            String trimmedLineWithoutTags \u003d trimmedLine.replace(\"-[\u003d]-\", \"\").replace(\"-[-]-\", \"\").replace(\"-[+]-\", \"\").trim();\n\n            if (closingBracketLine \u003d\u003d null \u0026\u0026 trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 (trimmedLine.endsWith(\"}\") || trimmedLine.endsWith(\"};\") || trimmedLine.endsWith(\"});\"))) {\n                closingBracketLine \u003d lines[i];\n                closingBracketLineIndex \u003d i;\n                matchCheckerLine \u003d closingBracketLine.replace(\"-[\u003d]-\", \"-[-]-\");\n            } else if (matchCheckerLine !\u003d null \u0026\u0026 lines[i].startsWith(matchCheckerLine)) {\n                replacementLineIndex \u003d i;\n            } else if (closingBracketLine !\u003d null \u0026\u0026 trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 !trimmedLineWithoutTags.isEmpty()) {\n                closingBracketLine \u003d null;\n                matchCheckerLine \u003d null;\n                if (replacementLineIndex !\u003d null) {\n                    lines[replacementLineIndex] \u003d lines[replacementLineIndex].replace(\"-[-]-\", \"-[\u003d]-\");\n                    lines[closingBracketLineIndex] \u003d lines[closingBracketLineIndex].replace(\"-[\u003d]-\", \"-[-]-\");\n                    replacementLineIndex \u003d null;\n                    closingBracketLineIndex \u003d null;\n                }\n            }\n        }\n\n        return String.join(\"\\n\", lines);\n    }\n}\n","modification":"In the postProcessDiffString, I actually want it to go originally from the bottom up first off, so when its sliding brackets down it makes sure to get all of them. Second, I want it to move with those brackets, all -[+]- code directly above it (as that can also be shifted down), so that needs to get selected with the bracket and then replaced","suggestedCodeBeforeRestoration":"public class DiffStringServiceImpl implements DiffStringService {\n// [Code omitted for brevity]\n\npublic String postProcessDiffString(String diffString) {\n    String[] lines \u003d diffString.split(\"\\n\");\n    String closingBracketLine \u003d null;\n    String matchCheckerLine \u003d null;\n    Integer closingBracketLineIndex \u003d null;\n    Integer replacementLineIndex \u003d null;\n\n    for (int i \u003d lines.length - 1; i \u003e\u003d 0; i--) {\n        String trimmedLine \u003d lines[i].trim();\n        String trimmedLineWithoutTags \u003d trimmedLine.replace(\"-[\u003d]-\", \"\").replace(\"-[-]-\", \"\").replace(\"-[+]-\", \"\").trim();\n\n        if (closingBracketLine \u003d\u003d null \u0026\u0026 trimmedLine.startsWith(\"-[\u003d]-\") \u0026\u0026 (trimmedLine.endsWith(\"}\") || trimmedLine.endsWith(\"};\") || trimmedLine.endsWith(\"});\"))) {\n            closingBracketLine \u003d lines[i];\n            closingBracketLineIndex \u003d i;\n            matchCheckerLine \u003d closingBracketLine.replace(\"-[\u003d]-\", \"-[-]-\");\n        } else if (matchCheckerLine !\u003d null \u0026\u0026 lines[i].startsWith(matchCheckerLine)) {\n            replacementLineIndex \u003d i;\n        } else if (closingBracketLine !\u003d null \u0026\u0026 (trimmedLine.startsWith(\"-[+]-\") || trimmedLine.startsWith(\"-[\u003d]-\")) \u0026\u0026 !trimmedLineWithoutTags.isEmpty()) {\n            closingBracketLine \u003d null;\n            matchCheckerLine \u003d null;\n            if (replacementLineIndex !\u003d null) {\n                lines[replacementLineIndex] \u003d lines[replacementLineIndex].replace(\"-[-]-\", \"-[\u003d]-\");\n                lines[closingBracketLineIndex] \u003d lines[closingBracketLineIndex].replace(\"-[\u003d]-\", \"-[-]-\");\n                replacementLineIndex \u003d null;\n                closingBracketLineIndex \u003d null;\n            }\n        }\n    }\n\n    StringBuilder resultString \u003d new StringBuilder(String.join(\"\\n\", lines));\n()\n    return resultString.toString();\n}\n}\n","suggestedCode":"public class DiffStringServiceImpl implements DiffStringService {\n    public String getDiffString(String beforeCode, String afterCode) {\n        List\u003cString\u003e beforeLines \u003d Arrays.asList(beforeCode.split(\"\\n\"));\n        List\u003cString\u003e afterLines \u003d Arrays.asList(afterCode.split(\"\\n\"));\n\n\n        Patch\u003cString\u003e patch \u003d DiffUtils.diff(beforeLines, afterLines);\n        List\u003cAbstractDelta\u003cString\u003e\u003e deltas \u003d patch.getDeltas();\npublic String postProcessDiffString(String diffString) {\n    String[] lines \u003d diffString.split(\"\\n\");\n    String closingBracketLine \u003d null;\n    String matchCheckerLine \u003d null;\n    Integer closingBracketLineIndex \u003d null;\n    Integer replacementLineIndex \u003d null;\n\n        StringBuilder merged \u003d new StringBuilder();\n        List\u003cPair\u003cInteger, String\u003e\u003e changes \u003d new ArrayList\u003c\u003e();\n        int beforePosition \u003d 0;\n        int afterPosition \u003d 0;\n    for (int i \u003d lines.length - 1; i \u003e\u003d 0; i--) {\n        String trimmedLine \u003d lines[i].trim();\n\n        if (closingBracketLine \u003d\u003d null \u0026\u0026 trimmedLine.startsWith(\"\") \u0026\u0026 (trimmedLine.endsWith(\"}\") || trimmedLine.endsWith(\"};\") || trimmedLine.endsWith(\"});\"))) {\n            closingBracketLine \u003d lines[i];\n            closingBracketLineIndex \u003d i;\n        } else if (matchCheckerLine !\u003d null \u0026\u0026 lines[i].startsWith(matchCheckerLine)) {\n            replacementLineIndex \u003d i;\n        } else if (closingBracketLine !\u003d null \u0026\u0026 (trimmedLine.startsWith(\"\") || trimmedLine.startsWith(\"\")) \u0026\u0026 !trimmedLineWithoutTags.isEmpty()) {\n            closingBracketLine \u003d null;\n            matchCheckerLine \u003d null;\n            if (replacementLineIndex !\u003d null) {\n                replacementLineIndex \u003d null;\n                closingBracketLineIndex \u003d null;\n            }\n        }\n\n    }\n    StringBuilder resultString \u003d new StringBuilder(String.join(\"\\n\", lines));\n()\n    return resultString.toString();\n}\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":5},"time":{"hour":22,"minute":37,"second":28,"nano":154022424}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":5},"time":{"hour":22,"minute":37,"second":28,"nano":154041857}},"myId":"4c11ba12-c8a8-4dea-94e6-9037f332b93b","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"9d5b0155-e67f-4cee-9dba-a8b8ba4451e7","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add a method at the end of this class that prints \"Wohoo World!\"","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add a method at the end of this class that prints \"Wohoo World!\"","suggestedCodeBeforeRestoration":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n\n    // Existing class code and methods\n    // [Code omitted for brevity]\n            \n        // Newly added method\n        public void printWohooWorld() {\n                System.out.println(\"Wohoo World!\");\n            }\n            \n            // Rest of the class code and methods\n                // [Code omitted for brevity]\n            \n                @Override\n                public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n                    FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n                    GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n                    if (fixedCode.getError() !\u003d null) {\n                        return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n                    }\n                    String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n                    isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n                    FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n                    fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n                    return fileModificationSuggestionModificationRecord;\n                }\n                \n                // Newly added method\n                public void printWohooWorld() {\n                    System.out.println(\"Wohoo World!\");\n                }\n                // Remember the \"Done\" line after this\n                // It won\u0027t be part of the finalized code\n","suggestedCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n    // Existing class code and methods\n\n            \n        // Newly added method\n        public void printWohooWorld() {\n                System.out.println(\"Wohoo World!\");\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}\n            \n            // Rest of the class code and methods\n\n            \n                @Override\n                public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n                    FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n                    GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n                    if (fixedCode.getError() !\u003d null) {\n                        return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n                    }\n                    String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n                    isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n                    FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n                    fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n                    return fileModificationSuggestionModificationRecord;\n                }\n                \n                // Newly added method\n                public void printWohooWorld() {\n                    System.out.println(\"Wohoo World!\");\n                }\n                // Remember the \"Done\" line after this\n                // It won\u0027t be part of the finalized code","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":5},"time":{"hour":22,"minute":32,"second":56,"nano":766422874}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":5},"time":{"hour":22,"minute":32,"second":56,"nano":766438076}},"myId":"f588f99b-b22f-492a-b9cf-c198a471162d","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"0dbd0ea0-44e7-4514-951e-3df25da15eea","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add a method to print \u0027Wohoo Hello World Two!\u0027","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add a method at the end of this class that prints \"Wohoo Hello World Two!","suggestedCodeBeforeRestoration":"@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    // [Code omitted for brevity]\n\n    /* \n    Other methods and logic of the class here \n    [Code omitted for brevity] \n    */\n\n    /**\n     * Print greeting message\n     */\n    public void printHello() {\n        System.out.println(\"Wohoo Hello World Two!\");\n    }\n}\n","suggestedCode":"@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    /* \n    Other methods and logic of the class here \n\n    */\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    /**\n     * Print greeting message\n     */\n    public void printHello() {\n        System.out.println(\"Wohoo Hello World Two!\");\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":5},"time":{"hour":22,"minute":32,"second":6,"nano":691817030}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":5},"time":{"hour":22,"minute":32,"second":6,"nano":691835248}},"myId":"869436c8-b2b2-4604-a5ba-2c9cd69f06ac","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"ecddca73-171b-4f9f-a099-cd4597c53643","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add a method to print \u0027Wohoo Hello World Two!\u0027 in a class","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add a method at the end of this class that prints \"Wohoo Hello World Two!","suggestedCodeBeforeRestoration":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n  \n  // [Code omitted for brevity]\n      }\n  \n      // Your new method\n      public void printMessage() {\n          System.out.println(\"Wohoo Hello World Two!\");\n      }\n  \n  }\n","suggestedCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}\n  \n\n      }\n  \n      // Your new method\n      public void printMessage() {\n          System.out.println(\"Wohoo Hello World Two!\");\n      }\n  \n  }","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":5},"time":{"hour":22,"minute":30,"second":48,"nano":595797222}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":5},"time":{"hour":22,"minute":30,"second":48,"nano":595810720}},"myId":"5b148f5b-e6fa-4bf9-a6c1-a913522ba1c8","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"31ef3b15-de66-4061-88a4-621ad97a2838","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add a method at the end of this class that prints \"Wohoo Hello World Two!","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add a method at the end of this class that prints \"Wohoo Hello World Two!","suggestedCodeBeforeRestoration":"// Additional Method\npublic void printMessage() {\n    System.out.println(\"Wohoo Hello World Two!\");\n}\n// Done\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n\n    // Variables, constructors, and other methods would be here.\n\n    // [Code omitted for brevity]\n\n    // Additional Method\n    public void printMessage() {\n        System.out.println(\"Wohoo Hello World Two!\");\n    }\n}\n","suggestedCode":"// Additional Method\npublic void printMessage() {\n    System.out.println(\"Wohoo Hello World Two!\");\n}\n// Done\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n    // Variables, constructors, and other methods would be here.\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    // Additional Method\n    public void printMessage() {\n        System.out.println(\"Wohoo Hello World Two!\");\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"},{"fileModificationSuggestionRecord":{"creationTimestamp":{"date":{"year":2024,"month":5,"day":5},"time":{"hour":22,"minute":30,"second":26,"nano":593857069}},"modifiedTimestamp":{"date":{"year":2024,"month":5,"day":5},"time":{"hour":22,"minute":30,"second":26,"nano":593878316}},"myId":"b24e91ea-1e5c-4aef-b11d-e555e82a7447","userId":"86715441-ccd9-4b77-b2f6-0ec09403f538","modificationId":"7945811c-e4df-4667-9c71-43a378693d15","modificationType":"MODIFY","filePath":"/Users/zantehays/IdeaProjects/code-translator-dev/code-translator-service/src/main/java/com/translator/service/modification/CodeModifierServiceImpl.java","subjectLine":"Add a method to print \u0027Wohoo Hello World Two!\u0027 at the end of a class","beforeCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modification":"Add a method at the end of this class that prints \"Wohoo Hello World Two!","suggestedCodeBeforeRestoration":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n\n    /* [Code omitted for brevity] */\n    \n    // The new method to print \u0027Wohoo Hello World Two!\u0027\n    public void printHelloWorldTwo() {\n        System.out.println(\"Wohoo Hello World Two!\");\n    }\n\n}\n","suggestedCode":"package com.translator.service.modification;\n\nimport com.translator.dao.user.record.modification.FileModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionModificationRecordDao;\nimport com.translator.dao.user.record.modification.FileModificationSuggestionRecordDao;\nimport com.translator.model.api.openai.ChatGptCompletionResultResource;\nimport com.translator.model.api.openai.GptCodeCompletionResponseResource;\nimport com.translator.model.api.user.desktop.modification.DesktopCodeModificationResponseResource;\nimport com.translator.model.user.record.context.HistoricalContextObjectHolder;\nimport com.translator.model.user.record.modification.FileModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionModificationRecord;\nimport com.translator.model.user.record.modification.FileModificationSuggestionRecord;\nimport com.translator.model.user.record.modification.ModificationType;\nimport com.translator.service.inquiry.SubjectLineGeneratorAsyncService;\nimport com.translator.service.openai.ChatGptService;\nimport com.translator.service.openai.GptThreeService;\nimport com.translator.service.string.LanguageExtractorService;\nimport com.translator.service.string.StringIndentationSynchronizationService;\nimport com.translator.service.string.diff.StringCodeOmittedRestorerService;\nimport com.translator.service.user.record.modification.FileModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionModificationRecordService;\nimport com.translator.service.user.record.modification.FileModificationSuggestionRecordService;\nimport org.springframework.stereotype.Service;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\n@Service\npublic class CodeModifierServiceImpl implements CodeModifierService {\n    private final FileModificationRecordDao fileModificationRecordDao;\n    private final FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao;\n    private final FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao;\n    private final ChatGptService chatGptService;\n    private final GptThreeService gptThreeService;\n    private final FileModificationRecordService fileModificationRecordService;\n    private final FileModificationSuggestionRecordService fileModificationSuggestionRecordService;\n    private final FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService;\n    private final LanguageExtractorService languageExtractorService;\n    private final SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService;\n    private final StringIndentationSynchronizationService stringIndentationSynchronizationService;\n    private final StringCodeOmittedRestorerService stringCodeOmittedRestorerService;\n\n\n    public CodeModifierServiceImpl(FileModificationRecordDao fileModificationRecordDao,\n                                   FileModificationSuggestionRecordDao fileModificationSuggestionRecordDao,\n                                   FileModificationSuggestionModificationRecordDao fileModificationSuggestionModificationRecordDao,\n                                   ChatGptService chatGptService,\n                                   GptThreeService gptThreeService,\n                                   FileModificationRecordService fileModificationRecordService,\n                                   FileModificationSuggestionRecordService fileModificationSuggestionRecordService,\n                                   FileModificationSuggestionModificationRecordService fileModificationSuggestionModificationRecordService,\n                                   LanguageExtractorService languageExtractorService,\n                                   SubjectLineGeneratorAsyncService subjectLineGeneratorAsyncService,\n                                   StringIndentationSynchronizationService stringIndentationSynchronizationService,\n                                   StringCodeOmittedRestorerService stringCodeOmittedRestorerService) {\n        this.fileModificationRecordDao \u003d fileModificationRecordDao;\n        this.fileModificationSuggestionRecordDao \u003d fileModificationSuggestionRecordDao;\n        this.fileModificationSuggestionModificationRecordDao \u003d fileModificationSuggestionModificationRecordDao;\n        this.chatGptService \u003d chatGptService;\n        this.gptThreeService \u003d gptThreeService;\n        this.fileModificationRecordService \u003d fileModificationRecordService;\n        this.fileModificationSuggestionRecordService \u003d fileModificationSuggestionRecordService;\n        this.fileModificationSuggestionModificationRecordService \u003d fileModificationSuggestionModificationRecordService;\n        this.languageExtractorService \u003d languageExtractorService;\n        this.subjectLineGeneratorAsyncService \u003d subjectLineGeneratorAsyncService;\n        this.stringIndentationSynchronizationService \u003d stringIndentationSynchronizationService;\n        this.stringCodeOmittedRestorerService \u003d stringCodeOmittedRestorerService;\n\n    \n    // The new method to print \u0027Wohoo Hello World Two!\u0027\n    public void printHelloWorldTwo() {\n        System.out.println(\"Wohoo Hello World Two!\");\n    }\n\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e modifyCode(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n\n    @Override\n    public GptCodeCompletionResponseResource modifyCodeSingular(String openAiApiKey, String code, String modification, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"Modify this code: \\\"\" + code + \"\\\" with the following modification(s): \\\"\" + modification + \". Also, add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\\\"\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n    @Override\n    public DesktopCodeModificationResponseResource modifyDesktopCodeFile(String userId, String openAiApiKey, String filePath, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, modification, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e modifiedCodeOptions \u003d modifyCode(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource modifiedCode : modifiedCodeOptions) {\n            if (modifiedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(modifiedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(modifiedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(modifiedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord modifyDesktopCodeFileModification(String suggestionId, String openAiApiKey, String code, String modification, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(modification, openAiApiKey, azure, azureResource, azureDeployment);\n        GptCodeCompletionResponseResource modifiedCode \u003d modifyCodeSingular(openAiApiKey, code, modification, model, priorContext, azure, azureResource, azureDeployment);\n        if (modifiedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(modifiedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(modifiedCode.getCode());\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, modification, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        try {\n            String subjectLine \u003d subjectLineFuture.get();\n            FileModificationSuggestionModificationRecord newFileModificationSuggestionModificationRecord \u003d fileModificationSuggestionModificationRecordDao.get(fileModificationSuggestionModificationRecord.getId());\n            newFileModificationSuggestionModificationRecord.setSubjectLine(subjectLine);\n            fileModificationSuggestionModificationRecordDao.put(newFileModificationSuggestionModificationRecord);\n            fileModificationSuggestionModificationRecord \u003d newFileModificationSuggestionModificationRecord;\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        return fileModificationSuggestionModificationRecord;\n    }\n\n    @Override\n    public List\u003cGptCodeCompletionResponseResource\u003e fixCodeBug(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            List\u003cGptCodeCompletionResponseResource\u003e options \u003d new ArrayList\u003c\u003e();\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                options.add(new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError()));\n                return options;\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            GptCodeCompletionResponseResource gptCodeCompletionResponseResource \u003d new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n            options.add(gptCodeCompletionResponseResource);\n            return options;\n        } else {\n            return gptThreeService.askForCode(openAiApiKey, prompt);\n        }\n    }\n\n\n    @Override\n    public GptCodeCompletionResponseResource fixCodeBugSingular(String openAiApiKey, String code, String bug, String model, List\u003cHistoricalContextObjectHolder\u003e priorContext, boolean azure, String azureResource, String azureDeployment) {\n        String prompt \u003d \"This code: \\\"\" + code + \"\\\" contains the following bug/error: \\\"\" + bug + \"\\\" What might the fix for this bug/error look like? Please provide the fixed code, but also add a line after the last line of code with a comment that says \u0027Done\u0027 on its own line after the last line of code so I know where the code ends. Do not include code on or after this done line, as the done line and after will be removed. Java example: \u0027code.end();\\n}\\n// Done\u0027\";\n        if (!model.equalsIgnoreCase(\"text-davinci-003\")) {\n            ChatGptCompletionResultResource chatGptCompletionResultResource;\n            if (priorContext !\u003d null) {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, priorContext, azure, azureResource, azureDeployment);\n            } else {\n                chatGptCompletionResultResource \u003d chatGptService.askForCode(openAiApiKey, prompt, model, azure, azureResource, azureDeployment);\n            }\n            if (chatGptCompletionResultResource.getChoices() \u003d\u003d null) {\n                return new GptCodeCompletionResponseResource(null, chatGptCompletionResultResource.getError());\n            }\n            String receivedCode \u003d chatGptCompletionResultResource.getChoices().get(0).getMessage().getContent();\n            receivedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, receivedCode);\n            String codeBeforeRestoration \u003d receivedCode;\n            receivedCode \u003d stringCodeOmittedRestorerService.restoreOmittedString(code, receivedCode);\n            String error \u003d chatGptCompletionResultResource.getError();\n            return new GptCodeCompletionResponseResource(receivedCode, codeBeforeRestoration, error);\n        } else {\n            return gptThreeService.askForCodeSingular(prompt, openAiApiKey);\n        }\n    }\n\n\n    @Override\n    public DesktopCodeModificationResponseResource fixDesktopCodeFileBug(String userId, String openAiApiKey, String filePath, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationRecord fileModificationRecord \u003d new FileModificationRecord(userId, filePath, code, bug, modificationType, model);\n        fileModificationRecordService.createFileModificationRecord(fileModificationRecord);\n        CompletableFuture\u003cString\u003e subjectLineFuture \u003d subjectLineGeneratorAsyncService.generateSubjectLine(bug, openAiApiKey, azure, azureResource, azureDeployment);\n        List\u003cGptCodeCompletionResponseResource\u003e fixedCodeOptions \u003d fixCodeBug(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        List\u003cFileModificationSuggestionRecord\u003e fileModificationSuggestionRecords \u003d new ArrayList\u003c\u003e();\n        DesktopCodeModificationResponseResource desktopCodeModificationResponseResource \u003d new DesktopCodeModificationResponseResource(fileModificationRecord);\n        String subjectLine \u003d null;\n        try {\n            subjectLine \u003d subjectLineFuture.get();\n            FileModificationRecord newFileModificationRecord \u003d fileModificationRecordDao.get(fileModificationRecord.getId());\n            newFileModificationRecord.setSubjectLine(subjectLine);\n            desktopCodeModificationResponseResource.setSubjectLine(subjectLine);\n            fileModificationRecordDao.put(newFileModificationRecord);\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n        for (GptCodeCompletionResponseResource fixedCode : fixedCodeOptions) {\n            if (fixedCode.getError() !\u003d null) {\n                return new DesktopCodeModificationResponseResource(fixedCode.getError());\n            }\n            String language \u003d languageExtractorService.extractLanguage(fixedCode.getCode());\n            String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n            String isolatedCodeBeforeRestoration \u003d languageExtractorService.isolateCode(fixedCode.getCodeBeforeRestoration());\n            FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d new FileModificationSuggestionRecord(userId, fileModificationRecord.getId(), modificationType, filePath, subjectLine, code, fileModificationRecord.getModification(), isolatedCodeBeforeRestoration, isolatedCode, language, priorContext);\n            fileModificationRecord.getModificationSuggestionRecordIds().add(fileModificationSuggestionRecord.getId());\n            desktopCodeModificationResponseResource.getModificationSuggestions().add(fileModificationSuggestionRecord);\n            fileModificationSuggestionRecords.add(fileModificationSuggestionRecord);\n        }\n        fileModificationSuggestionRecordService.createFileModificationSuggestionRecords(fileModificationSuggestionRecords);\n        return desktopCodeModificationResponseResource;\n    }\n\n    @Override\n    public FileModificationSuggestionModificationRecord fixDesktopCodeFileModificationBug(String suggestionId, String openAiApiKey, String code, String bug, ModificationType modificationType, List\u003cHistoricalContextObjectHolder\u003e priorContext, String model, boolean azure, String azureResource, String azureDeployment) {\n        FileModificationSuggestionRecord fileModificationSuggestionRecord \u003d fileModificationSuggestionRecordDao.get(suggestionId);\n        GptCodeCompletionResponseResource fixedCode \u003d fixCodeBugSingular(openAiApiKey, code, bug, model, priorContext, azure, azureResource, azureDeployment);\n        if (fixedCode.getError() !\u003d null) {\n            return new FileModificationSuggestionModificationRecord(fixedCode.getError());\n        }\n        String isolatedCode \u003d languageExtractorService.isolateCode(fixedCode.getCode());\n        isolatedCode \u003d stringIndentationSynchronizationService.synchronizeIndentation(code, isolatedCode);\n        FileModificationSuggestionModificationRecord fileModificationSuggestionModificationRecord \u003d new FileModificationSuggestionModificationRecord(fileModificationSuggestionRecord.getUserId(), fileModificationSuggestionRecord.getModificationId(), suggestionId, fileModificationSuggestionRecord.getFilePath(), code, bug, isolatedCode, modificationType, priorContext);\n        fileModificationSuggestionModificationRecordService.createFileModificationSuggestionModificationRecord(fileModificationSuggestionModificationRecord);\n        return fileModificationSuggestionModificationRecord;\n    }\n}","modificationSuggestionModificationIds":[]},"recordType":"FILE_MODIFICATION_SUGGESTION"}]}


                String suggestedCodeAfterRestoration = null;
                //try {
                    suggestedCodeAfterRestoration = "test"; //stringCodeOmittedRestorerService.restoreOmittedCode(beforeCode, suggestedCodeBeforeRestoration);
                /*} catch (IOException ex) {
                    throw new RuntimeException(ex);
                }*/
                //Editor editor = diffEditorGeneratorService.createDiffEditor(beforeCode, suggestedCodeAfterRestoration);
                EditorFactory editorFactory = EditorFactory.getInstance();
                Document document0 = editorFactory.createDocument("Before Code:\n" + beforeCode);
                Editor editor = editorFactory.createEditor(document0);

                StringTokenizerService stringTokenizerService = new StringTokenizerServiceImpl();
                /*String diffString = diffStringService.getDiffString(beforeCode, suggestedCodeBeforeRestoration);*/
                Document document = editorFactory.createDocument("Restructured code:\n" + stringTokenizerService.reconstructModifiedCode(beforeCode, suggestedCodeBeforeRestoration));
                Editor editor5 = editorFactory.createEditor(editorFactory.createDocument("After Code:\n" + suggestedCodeBeforeRestoration));
                Editor editor2 = editorFactory.createEditor(document);
                String diffString = stringTokenizerService.generateDiffString(beforeCode, suggestedCodeBeforeRestoration);
                Document document2 = editorFactory.createDocument("Diff Code:\n" + diffString);
                Editor editor3 = editorFactory.createEditor(document2);
                String restoredString = stringTokenizerService.reconstructModifiedCodeWithRestoration(beforeCode, suggestedCodeBeforeRestoration);
                Document document3 = editorFactory.createDocument("Diff Code restored to after code\n: " + restoredString);
                Editor editor4 = editorFactory.createEditor(document3);

                Editor afterRestoration = diffEditorGeneratorService.createDiffEditor(beforeCode, restoredString);

                // Create a new JPanel with a BoxLayout that stacks its children on top of each other
                JPanel panel = new JPanel();
                panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));

                // Add the Editors to the panel instead of the jFrame
                //panel.add(beforeRestoration.getComponent());
                panel.add(editor.getComponent());
                panel.add(editor2.getComponent());
                panel.add(editor5.getComponent());
                panel.add(editor3.getComponent());
                panel.add(editor4.getComponent());
                panel.add(afterRestoration.getComponent());

                // Add the panel to the JScrollPane
                JScrollPane jbScrollPane = new JScrollPane(panel);

                // Create a new JFrame and add the JScrollPane
                JFrame jFrame = new JFrame();
                jFrame.getContentPane().add(jbScrollPane);

                // Pack the JFrame, which sizes it to fit the preferred size of all the contained components
                jFrame.pack();

                jFrame.setVisible(true);

                //inquiryFunctionCallProcessorService.testMethod();
                /*System.out.println("Selected tree view file: ");
                VirtualFile[] selectedFiles = selectedFileFetcherService.getSelectedFilesInTreeView();
                if (selectedFiles != null) {
                    for (VirtualFile selectedFile : selectedFiles) {
                        System.out.println(selectedFile.getPath());
                    }
                }*/
            }
        });
        rightToolbar.add(testButton);

        topToolbar.add(leftToolbar);
        topToolbar.add(rightToolbar, BorderLayout.EAST);

        add(topToolbar, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
        add(buttonsPanel, BorderLayout.EAST);

        button1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                FileItem fileItem = (FileItem) fileComboBox.getSelectedItem();
                assert fileItem != null;
                assert modificationTypeComboBox.getSelectedItem() != null;
                if (modificationTypeComboBox.getSelectedItem().toString().equals("Modify")) {
                    String code = codeSnippetExtractorService.getAllText(fileItem.getFilePath());
                    if (!code.isEmpty() && !textArea.getText().isEmpty()) {
                        codactorToolWindowService.openModificationQueueViewerToolWindow();
                        aiCodeModificationService.getModifiedCode(fileItem.getFilePath(), textArea.getText(), ModificationType.MODIFY, promptContextService.getPromptContext());
                        promptContextService.clearPromptContext();
                    }
                } else if (modificationTypeComboBox.getSelectedItem().toString().equals("Modify Selected")) {
                    SelectionModel selectionModel = codeSnippetExtractorService.getSelectedText(fileItem.getFilePath());
                    String code = null;
                    if (selectionModel != null) {
                        code = selectionModel.getSelectedText();
                    }
                    if (code != null && !code.isEmpty() && !textArea.getText().isEmpty()) {
                        codactorToolWindowService.openModificationQueueViewerToolWindow();
                        aiCodeModificationService.getModifiedCode(fileItem.getFilePath(), selectionModel.getSelectionStart(), selectionModel.getSelectionEnd(), textArea.getText(), ModificationType.MODIFY_SELECTION, promptContextService.getPromptContext());
                        promptContextService.clearPromptContext();
                    }
                } else if (modificationTypeComboBox.getSelectedItem().toString().equals("Fix")) {
                    String code = codeSnippetExtractorService.getAllText(fileItem.getFilePath());
                    if (!code.isEmpty() && !textArea.getText().isEmpty()) {
                        codactorToolWindowService.openModificationQueueViewerToolWindow();
                        aiCodeModificationService.getFixedCode(fileItem.getFilePath(), textArea.getText(), ModificationType.FIX, promptContextService.getPromptContext());
                        promptContextService.clearPromptContext();
                    }
                } else if (modificationTypeComboBox.getSelectedItem().toString().equals("Fix Selected")) {
                    codactorToolWindowService.openModificationQueueViewerToolWindow();
                    SelectionModel selectionModel = codeSnippetExtractorService.getSelectedText(fileItem.getFilePath());
                    String code = null;
                    if (selectionModel != null) {
                        code = selectionModel.getSelectedText();
                    }
                    if (code != null && !code.isEmpty() && !textArea.getText().isEmpty()) {
                        codactorToolWindowService.openModificationQueueViewerToolWindow();
                        aiCodeModificationService.getFixedCode(fileItem.getFilePath(), selectionModel.getSelectionStart(), selectionModel.getSelectionEnd(), textArea.getText(), ModificationType.FIX_SELECTION, promptContextService.getPromptContext());
                        promptContextService.clearPromptContext();
                    }
                } else if (modificationTypeComboBox.getSelectedItem().toString().equals("Create")) {
                    if (!textArea.getText().isEmpty()) {
                        codactorToolWindowService.openModificationQueueViewerToolWindow();
                        aiCodeModificationService.getCreatedCode(fileItem.getFilePath(), textArea.getText(), promptContextService.getPromptContext());
                        promptContextService.clearPromptContext();
                    }
                } else if (modificationTypeComboBox.getSelectedItem().toString().equals("Create Files")) {
                    if (!textArea.getText().isEmpty()) {
                        MultiFileCreateDialog multiFileCreateDialog = multiFileCreateDialogFactory.create(null, textArea.getText(), promptContextService, openAiModelService);
                        multiFileCreateDialog.setVisible(true);
                        promptContextService.clearPromptContext();
                    }
                } else if (modificationTypeComboBox.getSelectedItem().toString().equals("Inquire")) {
                    if (!textArea.getText().isEmpty()) {
                        String code = codeSnippetExtractorService.getAllText(fileItem.getFilePath());
                        String question = textArea.getText();
                        InquiryViewer inquiryViewer = inquiryViewerFactory.create();
                        //inquiryViewer.getInquiryChatBoxViewer().getToolBar().setVisible(false);
                        inquiryService.createInquiry(inquiryViewer, fileItem.getFilePath(), code, question, promptContextService.getPromptContext(), openAiModelService.getSelectedOpenAiModel());
                        codactorToolWindowService.createInquiryViewerToolWindow(inquiryViewer);
                        promptContextService.clearPromptContext();
                    }
                } else if (modificationTypeComboBox.getSelectedItem().toString().equals("Inquire Selected")) {
                    SelectionModel selectionModel = codeSnippetExtractorService.getSelectedText(fileItem.getFilePath());
                    String code = null;
                    if (selectionModel != null) {
                        code = selectionModel.getSelectedText();
                    }
                    String question = textArea.getText();
                    InquiryViewer inquiryViewer = inquiryViewerFactory.create();
                    //inquiryViewer.getInquiryChatBoxViewer().getToolBar().setVisible(false);
                    inquiryService.createInquiry(inquiryViewer, fileItem.getFilePath(), code, question, promptContextService.getPromptContext(), openAiModelService.getSelectedOpenAiModel());
                    codactorToolWindowService.createInquiryViewerToolWindow(inquiryViewer);
                    promptContextService.clearPromptContext();
                } else if (modificationTypeComboBox.getSelectedItem().toString().equals("Translate")) {
                    codactorToolWindowService.openModificationQueueViewerToolWindow();
                    aiCodeModificationService.getTranslatedCode(fileItem.getFilePath(), languageInputTextField.getText(), fileTypeTextField.getText(), promptContextService.getPromptContext());
                    promptContextService.clearPromptContext();
                }
            }
        });

        button2.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            Robot robot = new Robot();

            textArea.requestFocusInWindow();
            textArea.setText("");

            // Simulate a key press event for the CNTRL key.
            robot.keyPress(KeyEvent.VK_CONTROL);
            robot.keyRelease(KeyEvent.VK_CONTROL);

            // Simulate another key press event for the CNTRL key.
            robot.keyPress(KeyEvent.VK_CONTROL);
            robot.keyRelease(KeyEvent.VK_CONTROL);
        } catch (AWTException ex) {
            ex.printStackTrace();
        }
    }
});
    }

    private void updateLabelAndButton(String selected) {
        if (selected == null) {
            return;
        }
        switch (selected) {
            case "Modify":
                fileComboBox.setVisible(true);
                button1.setText("Modify");
                jLabel1.setText(" Implement the following modification(s) to this code file:");
                languageInputTextField.setVisible(false);
                jLabel2.setVisible(false);
                fileTypeTextField.setVisible(false);
                textArea.setVisible(true);
                break;
            case "Fix":
                fileComboBox.setVisible(true);
                button1.setText("Fix");
                jLabel1.setText(" Fix the following error/problem in this code file:");
                languageInputTextField.setVisible(false);
                jLabel2.setVisible(false);
                fileTypeTextField.setVisible(false);
                textArea.setVisible(true);
                break;
            case "Create":
                fileComboBox.setVisible(true);
                button1.setText("Create");
                jLabel1.setText(" Create new code from scratch with the following description:");
                languageInputTextField.setVisible(false);
                jLabel2.setVisible(false);
                fileTypeTextField.setVisible(false);
                textArea.setVisible(true);
                break;
            case "Create Files":
                fileComboBox.setVisible(false);
                button1.setText("Create");
                jLabel1.setText(" (Experimental) Create multiple code files from the following description:");
                languageInputTextField.setVisible(false);
                jLabel2.setVisible(false);
                fileTypeTextField.setVisible(false);
                textArea.setVisible(true);
                break;
            case "Inquire":
                fileComboBox.setVisible(true);
                button1.setText("Ask");
                jLabel1.setText(" Ask the following question regarding this code file:");
                languageInputTextField.setVisible(false);
                jLabel2.setVisible(false);
                fileTypeTextField.setVisible(false);
                textArea.setVisible(true);
                break;
            case "Modify Selected":
                fileComboBox.setVisible(true);
                button1.setText("Modify");
                jLabel1.setText(" Implement the following modification(s) to the selected code:");
                languageInputTextField.setVisible(false);
                jLabel2.setVisible(false);
                fileTypeTextField.setVisible(false);
                textArea.setVisible(true);
                break;
            case "Fix Selected":
                fileComboBox.setVisible(true);
                button1.setText("Fix");
                jLabel1.setText(" Fix the following error/problem in this selected code:");
                languageInputTextField.setVisible(false);
                jLabel2.setVisible(false);
                fileTypeTextField.setVisible(false);
                textArea.setVisible(true);
                break;
            case "Inquire Selected":
                fileComboBox.setVisible(true);
                button1.setText("Ask");
                jLabel1.setText(" Ask the following question regarding this selected code:");
                languageInputTextField.setVisible(false);
                jLabel2.setVisible(false);
                fileTypeTextField.setVisible(false);
                textArea.setVisible(true);
                break;
            case "Translate":
                fileComboBox.setVisible(true);
                jLabel1.setText(" to language: ");
                button1.setText("Translate");
                languageInputTextField.setVisible(true);
                jLabel2.setVisible(true);
                fileTypeTextField.setVisible(true);
                textArea.setVisible(false);
                break;
            default:
                throw new IllegalArgumentException("Unexpected value: " + selected);
        }
    }

    public void updateModelComboBox() {

// Get the index of the selected element
        String selectedElement = openAiModelService.getSelectedOpenAiModel();
        int selectedIndex = -1;
        for (int i = 0; i < modelComboBox.getItemCount(); i++) {
            if (selectedElement.equals(modelComboBox.getItemAt(i))) {
                selectedIndex = i;
                break;
            }
        }

// Check if the selected element is in the combo box
        if (selectedIndex != -1 && selectedIndex != 0) {
            // Store the element at position 0
            String elementAtZero = modelComboBox.getItemAt(0);

            // Remove the selected element from the combo box
            modelComboBox.removeItemAt(selectedIndex);

            // Insert the selected element at the first position
            modelComboBox.insertItemAt(selectedElement, 0);

            // Remove the element at position 1 (which was previously at position 0)
            modelComboBox.removeItemAt(1);

            // Insert the element that was previously at position 0 to the original position of the selected element
            modelComboBox.insertItemAt(elementAtZero, selectedIndex);

            // Set the selected index to 0
            modelComboBox.setSelectedIndex(0);
        }
    }

    public void updateModificationTypeComboBox(String selected) {
        modificationTypeComboBox.setSelectedItem(selected);
        int selectedIndex = -1;
        for (int i = 0; i < modificationTypeComboBox.getItemCount(); i++) {
            if (selected.equals(modificationTypeComboBox.getItemAt(i))) {
                selectedIndex = i;
                break;
            }
        }

        // Check if the selected element is in the combo box
        if (selectedIndex != -1 && selectedIndex != 0) {
            // Store the element at position 0
            String elementAtZero = modificationTypeComboBox.getItemAt(0);

            // Remove the selected element from the combo box
            modificationTypeComboBox.removeItemAt(selectedIndex);

            // Insert the selected element at the first position
            modificationTypeComboBox.insertItemAt(selected, 0);

            // Remove the element at position 1 (which was previously at position 0)
            modificationTypeComboBox.removeItemAt(1);

            // Insert the element that was previously at position 0 to the original position of the selected element
            modificationTypeComboBox.insertItemAt(elementAtZero, selectedIndex);

            // Set the selected index to 0
            modificationTypeComboBox.setSelectedIndex(0);
        }
        updateLabelAndButton(selected);
    }

    private VirtualFile getSelectedFile() {
        FileEditorManager fileEditorManager = FileEditorManager.getInstance(project);
        Editor editor = fileEditorManager.getSelectedTextEditor();
        if (editor != null) {
            Document document = editor.getDocument();
            return FileDocumentManager.getInstance().getFile(document);
        }
        return null;
    }
}